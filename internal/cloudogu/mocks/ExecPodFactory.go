// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	core "github.com/cloudogu/cesapp-lib/core"
	cloudogu "github.com/cloudogu/k8s-dogu-operator/internal/cloudogu"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/cloudogu/k8s-dogu-operator/api/v1"
)

// ExecPodFactory is an autogenerated mock type for the ExecPodFactory type
type ExecPodFactory struct {
	mock.Mock
}

type ExecPodFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecPodFactory) EXPECT() *ExecPodFactory_Expecter {
	return &ExecPodFactory_Expecter{mock: &_m.Mock}
}

// NewExecPod provides a mock function with given fields: doguResource, dogu
func (_m *ExecPodFactory) NewExecPod(doguResource *v1.Dogu, dogu *core.Dogu) (cloudogu.ExecPod, error) {
	ret := _m.Called(doguResource, dogu)

	var r0 cloudogu.ExecPod
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1.Dogu, *core.Dogu) (cloudogu.ExecPod, error)); ok {
		return rf(doguResource, dogu)
	}
	if rf, ok := ret.Get(0).(func(*v1.Dogu, *core.Dogu) cloudogu.ExecPod); ok {
		r0 = rf(doguResource, dogu)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cloudogu.ExecPod)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1.Dogu, *core.Dogu) error); ok {
		r1 = rf(doguResource, dogu)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecPodFactory_NewExecPod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewExecPod'
type ExecPodFactory_NewExecPod_Call struct {
	*mock.Call
}

// NewExecPod is a helper method to define mock.On call
//   - doguResource *v1.Dogu
//   - dogu *core.Dogu
func (_e *ExecPodFactory_Expecter) NewExecPod(doguResource interface{}, dogu interface{}) *ExecPodFactory_NewExecPod_Call {
	return &ExecPodFactory_NewExecPod_Call{Call: _e.mock.On("NewExecPod", doguResource, dogu)}
}

func (_c *ExecPodFactory_NewExecPod_Call) Run(run func(doguResource *v1.Dogu, dogu *core.Dogu)) *ExecPodFactory_NewExecPod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Dogu), args[1].(*core.Dogu))
	})
	return _c
}

func (_c *ExecPodFactory_NewExecPod_Call) Return(_a0 cloudogu.ExecPod, _a1 error) *ExecPodFactory_NewExecPod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ExecPodFactory_NewExecPod_Call) RunAndReturn(run func(*v1.Dogu, *core.Dogu) (cloudogu.ExecPod, error)) *ExecPodFactory_NewExecPod_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewExecPodFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewExecPodFactory creates a new instance of ExecPodFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExecPodFactory(t mockConstructorTestingTNewExecPodFactory) *ExecPodFactory {
	mock := &ExecPodFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

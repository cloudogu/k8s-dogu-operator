// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/cloudogu/cesapp-lib/core"
	mock "github.com/stretchr/testify/mock"

	v1 "github.com/cloudogu/k8s-dogu-operator/api/v1"
)

// ResourceDoguFetcher is an autogenerated mock type for the ResourceDoguFetcher type
type ResourceDoguFetcher struct {
	mock.Mock
}

type ResourceDoguFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceDoguFetcher) EXPECT() *ResourceDoguFetcher_Expecter {
	return &ResourceDoguFetcher_Expecter{mock: &_m.Mock}
}

// FetchWithResource provides a mock function with given fields: ctx, doguResource
func (_m *ResourceDoguFetcher) FetchWithResource(ctx context.Context, doguResource *v1.Dogu) (*core.Dogu, *v1.DevelopmentDoguMap, error) {
	ret := _m.Called(ctx, doguResource)

	var r0 *core.Dogu
	var r1 *v1.DevelopmentDoguMap
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Dogu) (*core.Dogu, *v1.DevelopmentDoguMap, error)); ok {
		return rf(ctx, doguResource)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Dogu) *core.Dogu); ok {
		r0 = rf(ctx, doguResource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Dogu)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Dogu) *v1.DevelopmentDoguMap); ok {
		r1 = rf(ctx, doguResource)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*v1.DevelopmentDoguMap)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *v1.Dogu) error); ok {
		r2 = rf(ctx, doguResource)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourceDoguFetcher_FetchWithResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchWithResource'
type ResourceDoguFetcher_FetchWithResource_Call struct {
	*mock.Call
}

// FetchWithResource is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v1.Dogu
func (_e *ResourceDoguFetcher_Expecter) FetchWithResource(ctx interface{}, doguResource interface{}) *ResourceDoguFetcher_FetchWithResource_Call {
	return &ResourceDoguFetcher_FetchWithResource_Call{Call: _e.mock.On("FetchWithResource", ctx, doguResource)}
}

func (_c *ResourceDoguFetcher_FetchWithResource_Call) Run(run func(ctx context.Context, doguResource *v1.Dogu)) *ResourceDoguFetcher_FetchWithResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Dogu))
	})
	return _c
}

func (_c *ResourceDoguFetcher_FetchWithResource_Call) Return(_a0 *core.Dogu, _a1 *v1.DevelopmentDoguMap, _a2 error) *ResourceDoguFetcher_FetchWithResource_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ResourceDoguFetcher_FetchWithResource_Call) RunAndReturn(run func(context.Context, *v1.Dogu) (*core.Dogu, *v1.DevelopmentDoguMap, error)) *ResourceDoguFetcher_FetchWithResource_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewResourceDoguFetcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewResourceDoguFetcher creates a new instance of ResourceDoguFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResourceDoguFetcher(t mockConstructorTestingTNewResourceDoguFetcher) *ResourceDoguFetcher {
	mock := &ResourceDoguFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

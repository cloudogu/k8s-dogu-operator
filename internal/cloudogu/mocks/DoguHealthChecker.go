// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "k8s.io/apimachinery/pkg/types"
)

// DoguHealthChecker is an autogenerated mock type for the DoguHealthChecker type
type DoguHealthChecker struct {
	mock.Mock
}

type DoguHealthChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *DoguHealthChecker) EXPECT() *DoguHealthChecker_Expecter {
	return &DoguHealthChecker_Expecter{mock: &_m.Mock}
}

// CheckByName provides a mock function with given fields: ctx, doguName
func (_m *DoguHealthChecker) CheckByName(ctx context.Context, doguName types.NamespacedName) error {
	ret := _m.Called(ctx, doguName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.NamespacedName) error); ok {
		r0 = rf(ctx, doguName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoguHealthChecker_CheckByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckByName'
type DoguHealthChecker_CheckByName_Call struct {
	*mock.Call
}

// CheckByName is a helper method to define mock.On call
//   - ctx context.Context
//   - doguName types.NamespacedName
func (_e *DoguHealthChecker_Expecter) CheckByName(ctx interface{}, doguName interface{}) *DoguHealthChecker_CheckByName_Call {
	return &DoguHealthChecker_CheckByName_Call{Call: _e.mock.On("CheckByName", ctx, doguName)}
}

func (_c *DoguHealthChecker_CheckByName_Call) Run(run func(ctx context.Context, doguName types.NamespacedName)) *DoguHealthChecker_CheckByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.NamespacedName))
	})
	return _c
}

func (_c *DoguHealthChecker_CheckByName_Call) Return(_a0 error) *DoguHealthChecker_CheckByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DoguHealthChecker_CheckByName_Call) RunAndReturn(run func(context.Context, types.NamespacedName) error) *DoguHealthChecker_CheckByName_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewDoguHealthChecker interface {
	mock.TestingT
	Cleanup(func())
}

// NewDoguHealthChecker creates a new instance of DoguHealthChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDoguHealthChecker(t mockConstructorTestingTNewDoguHealthChecker) *DoguHealthChecker {
	mock := &DoguHealthChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

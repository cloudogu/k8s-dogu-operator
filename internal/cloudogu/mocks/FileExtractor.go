// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cloudogu "github.com/cloudogu/k8s-dogu-operator/internal/cloudogu"

	mock "github.com/stretchr/testify/mock"
)

// FileExtractor is an autogenerated mock type for the FileExtractor type
type FileExtractor struct {
	mock.Mock
}

type FileExtractor_Expecter struct {
	mock *mock.Mock
}

func (_m *FileExtractor) EXPECT() *FileExtractor_Expecter {
	return &FileExtractor_Expecter{mock: &_m.Mock}
}

// ExtractK8sResourcesFromContainer provides a mock function with given fields: ctx, k8sExecPod
func (_m *FileExtractor) ExtractK8sResourcesFromContainer(ctx context.Context, k8sExecPod cloudogu.ExecPod) (map[string]string, error) {
	ret := _m.Called(ctx, k8sExecPod)

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cloudogu.ExecPod) (map[string]string, error)); ok {
		return rf(ctx, k8sExecPod)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cloudogu.ExecPod) map[string]string); ok {
		r0 = rf(ctx, k8sExecPod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cloudogu.ExecPod) error); ok {
		r1 = rf(ctx, k8sExecPod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileExtractor_ExtractK8sResourcesFromContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractK8sResourcesFromContainer'
type FileExtractor_ExtractK8sResourcesFromContainer_Call struct {
	*mock.Call
}

// ExtractK8sResourcesFromContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - k8sExecPod cloudogu.ExecPod
func (_e *FileExtractor_Expecter) ExtractK8sResourcesFromContainer(ctx interface{}, k8sExecPod interface{}) *FileExtractor_ExtractK8sResourcesFromContainer_Call {
	return &FileExtractor_ExtractK8sResourcesFromContainer_Call{Call: _e.mock.On("ExtractK8sResourcesFromContainer", ctx, k8sExecPod)}
}

func (_c *FileExtractor_ExtractK8sResourcesFromContainer_Call) Run(run func(ctx context.Context, k8sExecPod cloudogu.ExecPod)) *FileExtractor_ExtractK8sResourcesFromContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cloudogu.ExecPod))
	})
	return _c
}

func (_c *FileExtractor_ExtractK8sResourcesFromContainer_Call) Return(_a0 map[string]string, _a1 error) *FileExtractor_ExtractK8sResourcesFromContainer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileExtractor_ExtractK8sResourcesFromContainer_Call) RunAndReturn(run func(context.Context, cloudogu.ExecPod) (map[string]string, error)) *FileExtractor_ExtractK8sResourcesFromContainer_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewFileExtractor interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileExtractor creates a new instance of FileExtractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileExtractor(t mockConstructorTestingTNewFileExtractor) *FileExtractor {
	mock := &FileExtractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cloudogu "github.com/cloudogu/k8s-dogu-operator/internal/cloudogu"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/cloudogu/k8s-dogu-operator/api/v1"
)

// AsyncExecutor is an autogenerated mock type for the AsyncExecutor type
type AsyncExecutor struct {
	mock.Mock
}

type AsyncExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *AsyncExecutor) EXPECT() *AsyncExecutor_Expecter {
	return &AsyncExecutor_Expecter{mock: &_m.Mock}
}

// AddStep provides a mock function with given fields: step
func (_m *AsyncExecutor) AddStep(step cloudogu.AsyncStep) {
	_m.Called(step)
}

// AsyncExecutor_AddStep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStep'
type AsyncExecutor_AddStep_Call struct {
	*mock.Call
}

// AddStep is a helper method to define mock.On call
//   - step cloudogu.AsyncStep
func (_e *AsyncExecutor_Expecter) AddStep(step interface{}) *AsyncExecutor_AddStep_Call {
	return &AsyncExecutor_AddStep_Call{Call: _e.mock.On("AddStep", step)}
}

func (_c *AsyncExecutor_AddStep_Call) Run(run func(step cloudogu.AsyncStep)) *AsyncExecutor_AddStep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(cloudogu.AsyncStep))
	})
	return _c
}

func (_c *AsyncExecutor_AddStep_Call) Return() *AsyncExecutor_AddStep_Call {
	_c.Call.Return()
	return _c
}

func (_c *AsyncExecutor_AddStep_Call) RunAndReturn(run func(cloudogu.AsyncStep)) *AsyncExecutor_AddStep_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function with given fields: ctx, dogu, currentState
func (_m *AsyncExecutor) Execute(ctx context.Context, dogu *v1.Dogu, currentState string) error {
	ret := _m.Called(ctx, dogu, currentState)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Dogu, string) error); ok {
		r0 = rf(ctx, dogu, currentState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AsyncExecutor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type AsyncExecutor_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - dogu *v1.Dogu
//   - currentState string
func (_e *AsyncExecutor_Expecter) Execute(ctx interface{}, dogu interface{}, currentState interface{}) *AsyncExecutor_Execute_Call {
	return &AsyncExecutor_Execute_Call{Call: _e.mock.On("Execute", ctx, dogu, currentState)}
}

func (_c *AsyncExecutor_Execute_Call) Run(run func(ctx context.Context, dogu *v1.Dogu, currentState string)) *AsyncExecutor_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Dogu), args[2].(string))
	})
	return _c
}

func (_c *AsyncExecutor_Execute_Call) Return(_a0 error) *AsyncExecutor_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AsyncExecutor_Execute_Call) RunAndReturn(run func(context.Context, *v1.Dogu, string) error) *AsyncExecutor_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewAsyncExecutor interface {
	mock.TestingT
	Cleanup(func())
}

// NewAsyncExecutor creates a new instance of AsyncExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAsyncExecutor(t mockConstructorTestingTNewAsyncExecutor) *AsyncExecutor {
	mock := &AsyncExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	bytes "bytes"
	context "context"

	cloudogu "github.com/cloudogu/k8s-dogu-operator/internal/cloudogu"

	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"
)

// ExecPod is an autogenerated mock type for the ExecPod type
type ExecPod struct {
	mock.Mock
}

type ExecPod_Expecter struct {
	mock *mock.Mock
}

func (_m *ExecPod) EXPECT() *ExecPod_Expecter {
	return &ExecPod_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx
func (_m *ExecPod) Create(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecPod_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ExecPod_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ExecPod_Expecter) Create(ctx interface{}) *ExecPod_Create_Call {
	return &ExecPod_Create_Call{Call: _e.mock.On("Create", ctx)}
}

func (_c *ExecPod_Create_Call) Run(run func(ctx context.Context)) *ExecPod_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ExecPod_Create_Call) Return(_a0 error) *ExecPod_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecPod_Create_Call) RunAndReturn(run func(context.Context) error) *ExecPod_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx
func (_m *ExecPod) Delete(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExecPod_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ExecPod_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ExecPod_Expecter) Delete(ctx interface{}) *ExecPod_Delete_Call {
	return &ExecPod_Delete_Call{Call: _e.mock.On("Delete", ctx)}
}

func (_c *ExecPod_Delete_Call) Run(run func(ctx context.Context)) *ExecPod_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ExecPod_Delete_Call) Return(_a0 error) *ExecPod_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecPod_Delete_Call) RunAndReturn(run func(context.Context) error) *ExecPod_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: ctx, cmd
func (_m *ExecPod) Exec(ctx context.Context, cmd cloudogu.ShellCommand) (*bytes.Buffer, error) {
	ret := _m.Called(ctx, cmd)

	var r0 *bytes.Buffer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cloudogu.ShellCommand) (*bytes.Buffer, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cloudogu.ShellCommand) *bytes.Buffer); ok {
		r0 = rf(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cloudogu.ShellCommand) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecPod_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type ExecPod_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd cloudogu.ShellCommand
func (_e *ExecPod_Expecter) Exec(ctx interface{}, cmd interface{}) *ExecPod_Exec_Call {
	return &ExecPod_Exec_Call{Call: _e.mock.On("Exec", ctx, cmd)}
}

func (_c *ExecPod_Exec_Call) Run(run func(ctx context.Context, cmd cloudogu.ShellCommand)) *ExecPod_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cloudogu.ShellCommand))
	})
	return _c
}

func (_c *ExecPod_Exec_Call) Return(out *bytes.Buffer, err error) *ExecPod_Exec_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *ExecPod_Exec_Call) RunAndReturn(run func(context.Context, cloudogu.ShellCommand) (*bytes.Buffer, error)) *ExecPod_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectKey provides a mock function with given fields:
func (_m *ExecPod) ObjectKey() *types.NamespacedName {
	ret := _m.Called()

	var r0 *types.NamespacedName
	if rf, ok := ret.Get(0).(func() *types.NamespacedName); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NamespacedName)
		}
	}

	return r0
}

// ExecPod_ObjectKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectKey'
type ExecPod_ObjectKey_Call struct {
	*mock.Call
}

// ObjectKey is a helper method to define mock.On call
func (_e *ExecPod_Expecter) ObjectKey() *ExecPod_ObjectKey_Call {
	return &ExecPod_ObjectKey_Call{Call: _e.mock.On("ObjectKey")}
}

func (_c *ExecPod_ObjectKey_Call) Run(run func()) *ExecPod_ObjectKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecPod_ObjectKey_Call) Return(_a0 *types.NamespacedName) *ExecPod_ObjectKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecPod_ObjectKey_Call) RunAndReturn(run func() *types.NamespacedName) *ExecPod_ObjectKey_Call {
	_c.Call.Return(run)
	return _c
}

// PodName provides a mock function with given fields:
func (_m *ExecPod) PodName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecPod_PodName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PodName'
type ExecPod_PodName_Call struct {
	*mock.Call
}

// PodName is a helper method to define mock.On call
func (_e *ExecPod_Expecter) PodName() *ExecPod_PodName_Call {
	return &ExecPod_PodName_Call{Call: _e.mock.On("PodName")}
}

func (_c *ExecPod_PodName_Call) Run(run func()) *ExecPod_PodName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExecPod_PodName_Call) Return(_a0 string) *ExecPod_PodName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ExecPod_PodName_Call) RunAndReturn(run func() string) *ExecPod_PodName_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewExecPod interface {
	mock.TestingT
	Cleanup(func())
}

// NewExecPod creates a new instance of ExecPod. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExecPod(t mockConstructorTestingTNewExecPod) *ExecPod {
	mock := &ExecPod{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

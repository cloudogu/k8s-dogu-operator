// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	apply "github.com/cloudogu/k8s-apply-lib/apply"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Applier is an autogenerated mock type for the Applier type
type Applier struct {
	mock.Mock
}

type Applier_Expecter struct {
	mock *mock.Mock
}

func (_m *Applier) EXPECT() *Applier_Expecter {
	return &Applier_Expecter{mock: &_m.Mock}
}

// ApplyWithOwner provides a mock function with given fields: doc, namespace, resource
func (_m *Applier) ApplyWithOwner(doc apply.YamlDocument, namespace string, resource v1.Object) error {
	ret := _m.Called(doc, namespace, resource)

	var r0 error
	if rf, ok := ret.Get(0).(func(apply.YamlDocument, string, v1.Object) error); ok {
		r0 = rf(doc, namespace, resource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Applier_ApplyWithOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyWithOwner'
type Applier_ApplyWithOwner_Call struct {
	*mock.Call
}

// ApplyWithOwner is a helper method to define mock.On call
//   - doc apply.YamlDocument
//   - namespace string
//   - resource v1.Object
func (_e *Applier_Expecter) ApplyWithOwner(doc interface{}, namespace interface{}, resource interface{}) *Applier_ApplyWithOwner_Call {
	return &Applier_ApplyWithOwner_Call{Call: _e.mock.On("ApplyWithOwner", doc, namespace, resource)}
}

func (_c *Applier_ApplyWithOwner_Call) Run(run func(doc apply.YamlDocument, namespace string, resource v1.Object)) *Applier_ApplyWithOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(apply.YamlDocument), args[1].(string), args[2].(v1.Object))
	})
	return _c
}

func (_c *Applier_ApplyWithOwner_Call) Return(_a0 error) *Applier_ApplyWithOwner_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Applier_ApplyWithOwner_Call) RunAndReturn(run func(apply.YamlDocument, string, v1.Object) error) *Applier_ApplyWithOwner_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewApplier interface {
	mock.TestingT
	Cleanup(func())
}

// NewApplier creates a new instance of Applier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApplier(t mockConstructorTestingTNewApplier) *Applier {
	mock := &Applier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

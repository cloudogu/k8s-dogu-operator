// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	bytes "bytes"
	context "context"

	cloudogu "github.com/cloudogu/k8s-dogu-operator/v2/internal/cloudogu"

	corev1 "k8s.io/api/core/v1"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/cloudogu/k8s-dogu-operator/v2/api/v1"
)

// CommandExecutor is an autogenerated mock type for the CommandExecutor type
type CommandExecutor struct {
	mock.Mock
}

type CommandExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *CommandExecutor) EXPECT() *CommandExecutor_Expecter {
	return &CommandExecutor_Expecter{mock: &_m.Mock}
}

// ExecCommandForDogu provides a mock function with given fields: ctx, resource, command, expected
func (_m *CommandExecutor) ExecCommandForDogu(ctx context.Context, resource *v1.Dogu, command cloudogu.ShellCommand, expected cloudogu.PodStatusForExec) (*bytes.Buffer, error) {
	ret := _m.Called(ctx, resource, command, expected)

	var r0 *bytes.Buffer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Dogu, cloudogu.ShellCommand, cloudogu.PodStatusForExec) (*bytes.Buffer, error)); ok {
		return rf(ctx, resource, command, expected)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Dogu, cloudogu.ShellCommand, cloudogu.PodStatusForExec) *bytes.Buffer); ok {
		r0 = rf(ctx, resource, command, expected)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.Dogu, cloudogu.ShellCommand, cloudogu.PodStatusForExec) error); ok {
		r1 = rf(ctx, resource, command, expected)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommandExecutor_ExecCommandForDogu_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecCommandForDogu'
type CommandExecutor_ExecCommandForDogu_Call struct {
	*mock.Call
}

// ExecCommandForDogu is a helper method to define mock.On call
//   - ctx context.Context
//   - resource *v1.Dogu
//   - command cloudogu.ShellCommand
//   - expected cloudogu.PodStatusForExec
func (_e *CommandExecutor_Expecter) ExecCommandForDogu(ctx interface{}, resource interface{}, command interface{}, expected interface{}) *CommandExecutor_ExecCommandForDogu_Call {
	return &CommandExecutor_ExecCommandForDogu_Call{Call: _e.mock.On("ExecCommandForDogu", ctx, resource, command, expected)}
}

func (_c *CommandExecutor_ExecCommandForDogu_Call) Run(run func(ctx context.Context, resource *v1.Dogu, command cloudogu.ShellCommand, expected cloudogu.PodStatusForExec)) *CommandExecutor_ExecCommandForDogu_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Dogu), args[2].(cloudogu.ShellCommand), args[3].(cloudogu.PodStatusForExec))
	})
	return _c
}

func (_c *CommandExecutor_ExecCommandForDogu_Call) Return(_a0 *bytes.Buffer, _a1 error) *CommandExecutor_ExecCommandForDogu_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommandExecutor_ExecCommandForDogu_Call) RunAndReturn(run func(context.Context, *v1.Dogu, cloudogu.ShellCommand, cloudogu.PodStatusForExec) (*bytes.Buffer, error)) *CommandExecutor_ExecCommandForDogu_Call {
	_c.Call.Return(run)
	return _c
}

// ExecCommandForPod provides a mock function with given fields: ctx, pod, command, expected
func (_m *CommandExecutor) ExecCommandForPod(ctx context.Context, pod *corev1.Pod, command cloudogu.ShellCommand, expected cloudogu.PodStatusForExec) (*bytes.Buffer, error) {
	ret := _m.Called(ctx, pod, command, expected)

	var r0 *bytes.Buffer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Pod, cloudogu.ShellCommand, cloudogu.PodStatusForExec) (*bytes.Buffer, error)); ok {
		return rf(ctx, pod, command, expected)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Pod, cloudogu.ShellCommand, cloudogu.PodStatusForExec) *bytes.Buffer); ok {
		r0 = rf(ctx, pod, command, expected)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1.Pod, cloudogu.ShellCommand, cloudogu.PodStatusForExec) error); ok {
		r1 = rf(ctx, pod, command, expected)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommandExecutor_ExecCommandForPod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecCommandForPod'
type CommandExecutor_ExecCommandForPod_Call struct {
	*mock.Call
}

// ExecCommandForPod is a helper method to define mock.On call
//   - ctx context.Context
//   - pod *corev1.Pod
//   - command cloudogu.ShellCommand
//   - expected cloudogu.PodStatusForExec
func (_e *CommandExecutor_Expecter) ExecCommandForPod(ctx interface{}, pod interface{}, command interface{}, expected interface{}) *CommandExecutor_ExecCommandForPod_Call {
	return &CommandExecutor_ExecCommandForPod_Call{Call: _e.mock.On("ExecCommandForPod", ctx, pod, command, expected)}
}

func (_c *CommandExecutor_ExecCommandForPod_Call) Run(run func(ctx context.Context, pod *corev1.Pod, command cloudogu.ShellCommand, expected cloudogu.PodStatusForExec)) *CommandExecutor_ExecCommandForPod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*corev1.Pod), args[2].(cloudogu.ShellCommand), args[3].(cloudogu.PodStatusForExec))
	})
	return _c
}

func (_c *CommandExecutor_ExecCommandForPod_Call) Return(_a0 *bytes.Buffer, _a1 error) *CommandExecutor_ExecCommandForPod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CommandExecutor_ExecCommandForPod_Call) RunAndReturn(run func(context.Context, *corev1.Pod, cloudogu.ShellCommand, cloudogu.PodStatusForExec) (*bytes.Buffer, error)) *CommandExecutor_ExecCommandForPod_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCommandExecutor interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommandExecutor creates a new instance of CommandExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommandExecutor(t mockConstructorTestingTNewCommandExecutor) *CommandExecutor {
	mock := &CommandExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

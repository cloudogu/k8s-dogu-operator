// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/cloudogu/k8s-dogu-operator/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// CollectApplier is an autogenerated mock type for the CollectApplier type
type CollectApplier struct {
	mock.Mock
}

type CollectApplier_Expecter struct {
	mock *mock.Mock
}

func (_m *CollectApplier) EXPECT() *CollectApplier_Expecter {
	return &CollectApplier_Expecter{mock: &_m.Mock}
}

// CollectApply provides a mock function with given fields: ctx, customK8sResources, doguResource
func (_m *CollectApplier) CollectApply(ctx context.Context, customK8sResources map[string]string, doguResource *v1.Dogu) error {
	ret := _m.Called(ctx, customK8sResources, doguResource)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, *v1.Dogu) error); ok {
		r0 = rf(ctx, customK8sResources, doguResource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectApplier_CollectApply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectApply'
type CollectApplier_CollectApply_Call struct {
	*mock.Call
}

// CollectApply is a helper method to define mock.On call
//   - ctx context.Context
//   - customK8sResources map[string]string
//   - doguResource *v1.Dogu
func (_e *CollectApplier_Expecter) CollectApply(ctx interface{}, customK8sResources interface{}, doguResource interface{}) *CollectApplier_CollectApply_Call {
	return &CollectApplier_CollectApply_Call{Call: _e.mock.On("CollectApply", ctx, customK8sResources, doguResource)}
}

func (_c *CollectApplier_CollectApply_Call) Run(run func(ctx context.Context, customK8sResources map[string]string, doguResource *v1.Dogu)) *CollectApplier_CollectApply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]string), args[2].(*v1.Dogu))
	})
	return _c
}

func (_c *CollectApplier_CollectApply_Call) Return(_a0 error) *CollectApplier_CollectApply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CollectApplier_CollectApply_Call) RunAndReturn(run func(context.Context, map[string]string, *v1.Dogu) error) *CollectApplier_CollectApply_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCollectApplier interface {
	mock.TestingT
	Cleanup(func())
}

// NewCollectApplier creates a new instance of CollectApplier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollectApplier(t mockConstructorTestingTNewCollectApplier) *CollectApplier {
	mock := &CollectApplier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

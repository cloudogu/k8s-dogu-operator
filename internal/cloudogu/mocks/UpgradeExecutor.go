// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/cloudogu/cesapp-lib/core"
	mock "github.com/stretchr/testify/mock"

	v1 "github.com/cloudogu/k8s-dogu-operator/v2/api/v1"
)

// UpgradeExecutor is an autogenerated mock type for the UpgradeExecutor type
type UpgradeExecutor struct {
	mock.Mock
}

type UpgradeExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *UpgradeExecutor) EXPECT() *UpgradeExecutor_Expecter {
	return &UpgradeExecutor_Expecter{mock: &_m.Mock}
}

// Upgrade provides a mock function with given fields: ctx, toDoguResource, fromDogu, toDogu
func (_m *UpgradeExecutor) Upgrade(ctx context.Context, toDoguResource *v1.Dogu, fromDogu *core.Dogu, toDogu *core.Dogu) error {
	ret := _m.Called(ctx, toDoguResource, fromDogu, toDogu)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Dogu, *core.Dogu, *core.Dogu) error); ok {
		r0 = rf(ctx, toDoguResource, fromDogu, toDogu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpgradeExecutor_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type UpgradeExecutor_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - ctx context.Context
//   - toDoguResource *v1.Dogu
//   - fromDogu *core.Dogu
//   - toDogu *core.Dogu
func (_e *UpgradeExecutor_Expecter) Upgrade(ctx interface{}, toDoguResource interface{}, fromDogu interface{}, toDogu interface{}) *UpgradeExecutor_Upgrade_Call {
	return &UpgradeExecutor_Upgrade_Call{Call: _e.mock.On("Upgrade", ctx, toDoguResource, fromDogu, toDogu)}
}

func (_c *UpgradeExecutor_Upgrade_Call) Run(run func(ctx context.Context, toDoguResource *v1.Dogu, fromDogu *core.Dogu, toDogu *core.Dogu)) *UpgradeExecutor_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.Dogu), args[2].(*core.Dogu), args[3].(*core.Dogu))
	})
	return _c
}

func (_c *UpgradeExecutor_Upgrade_Call) Return(_a0 error) *UpgradeExecutor_Upgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UpgradeExecutor_Upgrade_Call) RunAndReturn(run func(context.Context, *v1.Dogu, *core.Dogu, *core.Dogu) error) *UpgradeExecutor_Upgrade_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUpgradeExecutor interface {
	mock.TestingT
	Cleanup(func())
}

// NewUpgradeExecutor creates a new instance of UpgradeExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUpgradeExecutor(t mockConstructorTestingTNewUpgradeExecutor) *UpgradeExecutor {
	mock := &UpgradeExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

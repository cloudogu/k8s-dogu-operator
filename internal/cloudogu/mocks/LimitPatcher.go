// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	apiv1 "github.com/cloudogu/k8s-dogu-operator/api/v1"
	cloudogu "github.com/cloudogu/k8s-dogu-operator/internal/cloudogu"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/apps/v1"
)

// LimitPatcher is an autogenerated mock type for the LimitPatcher type
type LimitPatcher struct {
	mock.Mock
}

type LimitPatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *LimitPatcher) EXPECT() *LimitPatcher_Expecter {
	return &LimitPatcher_Expecter{mock: &_m.Mock}
}

// PatchDeployment provides a mock function with given fields: deployment, limits
func (_m *LimitPatcher) PatchDeployment(deployment *v1.Deployment, limits cloudogu.DoguLimits) error {
	ret := _m.Called(deployment, limits)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Deployment, cloudogu.DoguLimits) error); ok {
		r0 = rf(deployment, limits)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LimitPatcher_PatchDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchDeployment'
type LimitPatcher_PatchDeployment_Call struct {
	*mock.Call
}

// PatchDeployment is a helper method to define mock.On call
//  - deployment *v1.Deployment
//  - limits cloudogu.DoguLimits
func (_e *LimitPatcher_Expecter) PatchDeployment(deployment interface{}, limits interface{}) *LimitPatcher_PatchDeployment_Call {
	return &LimitPatcher_PatchDeployment_Call{Call: _e.mock.On("PatchDeployment", deployment, limits)}
}

func (_c *LimitPatcher_PatchDeployment_Call) Run(run func(deployment *v1.Deployment, limits cloudogu.DoguLimits)) *LimitPatcher_PatchDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Deployment), args[1].(cloudogu.DoguLimits))
	})
	return _c
}

func (_c *LimitPatcher_PatchDeployment_Call) Return(_a0 error) *LimitPatcher_PatchDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LimitPatcher_PatchDeployment_Call) RunAndReturn(run func(*v1.Deployment, cloudogu.DoguLimits) error) *LimitPatcher_PatchDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// RetrievePodLimits provides a mock function with given fields: doguResource
func (_m *LimitPatcher) RetrievePodLimits(doguResource *apiv1.Dogu) (cloudogu.DoguLimits, error) {
	ret := _m.Called(doguResource)

	var r0 cloudogu.DoguLimits
	var r1 error
	if rf, ok := ret.Get(0).(func(*apiv1.Dogu) (cloudogu.DoguLimits, error)); ok {
		return rf(doguResource)
	}
	if rf, ok := ret.Get(0).(func(*apiv1.Dogu) cloudogu.DoguLimits); ok {
		r0 = rf(doguResource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cloudogu.DoguLimits)
		}
	}

	if rf, ok := ret.Get(1).(func(*apiv1.Dogu) error); ok {
		r1 = rf(doguResource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LimitPatcher_RetrievePodLimits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrievePodLimits'
type LimitPatcher_RetrievePodLimits_Call struct {
	*mock.Call
}

// RetrievePodLimits is a helper method to define mock.On call
//  - doguResource *apiv1.Dogu
func (_e *LimitPatcher_Expecter) RetrievePodLimits(doguResource interface{}) *LimitPatcher_RetrievePodLimits_Call {
	return &LimitPatcher_RetrievePodLimits_Call{Call: _e.mock.On("RetrievePodLimits", doguResource)}
}

func (_c *LimitPatcher_RetrievePodLimits_Call) Run(run func(doguResource *apiv1.Dogu)) *LimitPatcher_RetrievePodLimits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*apiv1.Dogu))
	})
	return _c
}

func (_c *LimitPatcher_RetrievePodLimits_Call) Return(_a0 cloudogu.DoguLimits, _a1 error) *LimitPatcher_RetrievePodLimits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LimitPatcher_RetrievePodLimits_Call) RunAndReturn(run func(*apiv1.Dogu) (cloudogu.DoguLimits, error)) *LimitPatcher_RetrievePodLimits_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewLimitPatcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewLimitPatcher creates a new instance of LimitPatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLimitPatcher(t mockConstructorTestingTNewLimitPatcher) *LimitPatcher {
	mock := &LimitPatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

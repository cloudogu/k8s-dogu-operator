// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/cloudogu/cesapp-lib/core"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/cloudogu/k8s-dogu-operator/api/v1"
)

// DoguRegistrator is an autogenerated mock type for the DoguRegistrator type
type DoguRegistrator struct {
	mock.Mock
}

// RegisterDoguVersion provides a mock function with given fields: dogu
func (_m *DoguRegistrator) RegisterDoguVersion(dogu *core.Dogu) error {
	ret := _m.Called(dogu)

	var r0 error
	if rf, ok := ret.Get(0).(func(*core.Dogu) error); ok {
		r0 = rf(dogu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterNewDogu provides a mock function with given fields: ctx, doguResource, dogu
func (_m *DoguRegistrator) RegisterNewDogu(ctx context.Context, doguResource *v1.Dogu, dogu *core.Dogu) error {
	ret := _m.Called(ctx, doguResource, dogu)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Dogu, *core.Dogu) error); ok {
		r0 = rf(ctx, doguResource, dogu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnregisterDogu provides a mock function with given fields: dogu
func (_m *DoguRegistrator) UnregisterDogu(dogu string) error {
	ret := _m.Called(dogu)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dogu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDoguRegistrator interface {
	mock.TestingT
	Cleanup(func())
}

// NewDoguRegistrator creates a new instance of DoguRegistrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDoguRegistrator(t mockConstructorTestingTNewDoguRegistrator) *DoguRegistrator {
	mock := &DoguRegistrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

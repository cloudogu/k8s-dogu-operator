// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/cloudogu/k8s-dogu-operator/api/v1"
)

// AsyncStep is an autogenerated mock type for the AsyncStep type
type AsyncStep struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, dogu
func (_m *AsyncStep) Execute(ctx context.Context, dogu *v1.Dogu) (string, error) {
	ret := _m.Called(ctx, dogu)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Dogu) string); ok {
		r0 = rf(ctx, dogu)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.Dogu) error); ok {
		r1 = rf(ctx, dogu)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStartCondition provides a mock function with given fields:
func (_m *AsyncStep) GetStartCondition() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewAsyncStep interface {
	mock.TestingT
	Cleanup(func())
}

// NewAsyncStep creates a new instance of AsyncStep. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAsyncStep(t mockConstructorTestingTNewAsyncStep) *AsyncStep {
	mock := &AsyncStep{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

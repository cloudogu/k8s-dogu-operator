// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// DoguLimits is an autogenerated mock type for the DoguLimits type
type DoguLimits struct {
	mock.Mock
}

// CpuLimit provides a mock function with given fields:
func (_m *DoguLimits) CpuLimit() *resource.Quantity {
	ret := _m.Called()

	var r0 *resource.Quantity
	if rf, ok := ret.Get(0).(func() *resource.Quantity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resource.Quantity)
		}
	}

	return r0
}

// EphemeralStorageLimit provides a mock function with given fields:
func (_m *DoguLimits) EphemeralStorageLimit() *resource.Quantity {
	ret := _m.Called()

	var r0 *resource.Quantity
	if rf, ok := ret.Get(0).(func() *resource.Quantity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resource.Quantity)
		}
	}

	return r0
}

// MemoryLimit provides a mock function with given fields:
func (_m *DoguLimits) MemoryLimit() *resource.Quantity {
	ret := _m.Called()

	var r0 *resource.Quantity
	if rf, ok := ret.Get(0).(func() *resource.Quantity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resource.Quantity)
		}
	}

	return r0
}

type mockConstructorTestingTNewDoguLimits interface {
	mock.TestingT
	Cleanup(func())
}

// NewDoguLimits creates a new instance of DoguLimits. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDoguLimits(t mockConstructorTestingTNewDoguLimits) *DoguLimits {
	mock := &DoguLimits{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

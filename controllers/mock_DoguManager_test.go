// Code generated by mockery v2.46.2. DO NOT EDIT.

package controllers

import (
	context "context"

	v2 "github.com/cloudogu/k8s-dogu-operator/v3/api/v2"
	mock "github.com/stretchr/testify/mock"
)

// MockDoguManager is an autogenerated mock type for the DoguManager type
type MockDoguManager struct {
	mock.Mock
}

type MockDoguManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDoguManager) EXPECT() *MockDoguManager_Expecter {
	return &MockDoguManager_Expecter{mock: &_m.Mock}
}

// CheckStarted provides a mock function with given fields: ctx, doguResource
func (_m *MockDoguManager) CheckStarted(ctx context.Context, doguResource *v2.Dogu) error {
	ret := _m.Called(ctx, doguResource)

	if len(ret) == 0 {
		panic("no return value specified for CheckStarted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu) error); ok {
		r0 = rf(ctx, doguResource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguManager_CheckStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckStarted'
type MockDoguManager_CheckStarted_Call struct {
	*mock.Call
}

// CheckStarted is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
func (_e *MockDoguManager_Expecter) CheckStarted(ctx interface{}, doguResource interface{}) *MockDoguManager_CheckStarted_Call {
	return &MockDoguManager_CheckStarted_Call{Call: _e.mock.On("CheckStarted", ctx, doguResource)}
}

func (_c *MockDoguManager_CheckStarted_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu)) *MockDoguManager_CheckStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu))
	})
	return _c
}

func (_c *MockDoguManager_CheckStarted_Call) Return(_a0 error) *MockDoguManager_CheckStarted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguManager_CheckStarted_Call) RunAndReturn(run func(context.Context, *v2.Dogu) error) *MockDoguManager_CheckStarted_Call {
	_c.Call.Return(run)
	return _c
}

// CheckStopped provides a mock function with given fields: ctx, doguResource
func (_m *MockDoguManager) CheckStopped(ctx context.Context, doguResource *v2.Dogu) error {
	ret := _m.Called(ctx, doguResource)

	if len(ret) == 0 {
		panic("no return value specified for CheckStopped")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu) error); ok {
		r0 = rf(ctx, doguResource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguManager_CheckStopped_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckStopped'
type MockDoguManager_CheckStopped_Call struct {
	*mock.Call
}

// CheckStopped is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
func (_e *MockDoguManager_Expecter) CheckStopped(ctx interface{}, doguResource interface{}) *MockDoguManager_CheckStopped_Call {
	return &MockDoguManager_CheckStopped_Call{Call: _e.mock.On("CheckStopped", ctx, doguResource)}
}

func (_c *MockDoguManager_CheckStopped_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu)) *MockDoguManager_CheckStopped_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu))
	})
	return _c
}

func (_c *MockDoguManager_CheckStopped_Call) Return(_a0 error) *MockDoguManager_CheckStopped_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguManager_CheckStopped_Call) RunAndReturn(run func(context.Context, *v2.Dogu) error) *MockDoguManager_CheckStopped_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, doguResource
func (_m *MockDoguManager) Delete(ctx context.Context, doguResource *v2.Dogu) error {
	ret := _m.Called(ctx, doguResource)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu) error); ok {
		r0 = rf(ctx, doguResource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguManager_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDoguManager_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
func (_e *MockDoguManager_Expecter) Delete(ctx interface{}, doguResource interface{}) *MockDoguManager_Delete_Call {
	return &MockDoguManager_Delete_Call{Call: _e.mock.On("Delete", ctx, doguResource)}
}

func (_c *MockDoguManager_Delete_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu)) *MockDoguManager_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu))
	})
	return _c
}

func (_c *MockDoguManager_Delete_Call) Return(_a0 error) *MockDoguManager_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguManager_Delete_Call) RunAndReturn(run func(context.Context, *v2.Dogu) error) *MockDoguManager_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// HandleSupportMode provides a mock function with given fields: ctx, doguResource
func (_m *MockDoguManager) HandleSupportMode(ctx context.Context, doguResource *v2.Dogu) (bool, error) {
	ret := _m.Called(ctx, doguResource)

	if len(ret) == 0 {
		panic("no return value specified for HandleSupportMode")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu) (bool, error)); ok {
		return rf(ctx, doguResource)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu) bool); ok {
		r0 = rf(ctx, doguResource)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.Dogu) error); ok {
		r1 = rf(ctx, doguResource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguManager_HandleSupportMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleSupportMode'
type MockDoguManager_HandleSupportMode_Call struct {
	*mock.Call
}

// HandleSupportMode is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
func (_e *MockDoguManager_Expecter) HandleSupportMode(ctx interface{}, doguResource interface{}) *MockDoguManager_HandleSupportMode_Call {
	return &MockDoguManager_HandleSupportMode_Call{Call: _e.mock.On("HandleSupportMode", ctx, doguResource)}
}

func (_c *MockDoguManager_HandleSupportMode_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu)) *MockDoguManager_HandleSupportMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu))
	})
	return _c
}

func (_c *MockDoguManager_HandleSupportMode_Call) Return(_a0 bool, _a1 error) *MockDoguManager_HandleSupportMode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguManager_HandleSupportMode_Call) RunAndReturn(run func(context.Context, *v2.Dogu) (bool, error)) *MockDoguManager_HandleSupportMode_Call {
	_c.Call.Return(run)
	return _c
}

// Install provides a mock function with given fields: ctx, doguResource
func (_m *MockDoguManager) Install(ctx context.Context, doguResource *v2.Dogu) error {
	ret := _m.Called(ctx, doguResource)

	if len(ret) == 0 {
		panic("no return value specified for Install")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu) error); ok {
		r0 = rf(ctx, doguResource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguManager_Install_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Install'
type MockDoguManager_Install_Call struct {
	*mock.Call
}

// Install is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
func (_e *MockDoguManager_Expecter) Install(ctx interface{}, doguResource interface{}) *MockDoguManager_Install_Call {
	return &MockDoguManager_Install_Call{Call: _e.mock.On("Install", ctx, doguResource)}
}

func (_c *MockDoguManager_Install_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu)) *MockDoguManager_Install_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu))
	})
	return _c
}

func (_c *MockDoguManager_Install_Call) Return(_a0 error) *MockDoguManager_Install_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguManager_Install_Call) RunAndReturn(run func(context.Context, *v2.Dogu) error) *MockDoguManager_Install_Call {
	_c.Call.Return(run)
	return _c
}

// SetDoguAdditionalIngressAnnotations provides a mock function with given fields: ctx, doguResource
func (_m *MockDoguManager) SetDoguAdditionalIngressAnnotations(ctx context.Context, doguResource *v2.Dogu) error {
	ret := _m.Called(ctx, doguResource)

	if len(ret) == 0 {
		panic("no return value specified for SetDoguAdditionalIngressAnnotations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu) error); ok {
		r0 = rf(ctx, doguResource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguManager_SetDoguAdditionalIngressAnnotations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDoguAdditionalIngressAnnotations'
type MockDoguManager_SetDoguAdditionalIngressAnnotations_Call struct {
	*mock.Call
}

// SetDoguAdditionalIngressAnnotations is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
func (_e *MockDoguManager_Expecter) SetDoguAdditionalIngressAnnotations(ctx interface{}, doguResource interface{}) *MockDoguManager_SetDoguAdditionalIngressAnnotations_Call {
	return &MockDoguManager_SetDoguAdditionalIngressAnnotations_Call{Call: _e.mock.On("SetDoguAdditionalIngressAnnotations", ctx, doguResource)}
}

func (_c *MockDoguManager_SetDoguAdditionalIngressAnnotations_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu)) *MockDoguManager_SetDoguAdditionalIngressAnnotations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu))
	})
	return _c
}

func (_c *MockDoguManager_SetDoguAdditionalIngressAnnotations_Call) Return(_a0 error) *MockDoguManager_SetDoguAdditionalIngressAnnotations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguManager_SetDoguAdditionalIngressAnnotations_Call) RunAndReturn(run func(context.Context, *v2.Dogu) error) *MockDoguManager_SetDoguAdditionalIngressAnnotations_Call {
	_c.Call.Return(run)
	return _c
}

// SetDoguDataVolumeSize provides a mock function with given fields: ctx, doguResource
func (_m *MockDoguManager) SetDoguDataVolumeSize(ctx context.Context, doguResource *v2.Dogu) error {
	ret := _m.Called(ctx, doguResource)

	if len(ret) == 0 {
		panic("no return value specified for SetDoguDataVolumeSize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu) error); ok {
		r0 = rf(ctx, doguResource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguManager_SetDoguDataVolumeSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDoguDataVolumeSize'
type MockDoguManager_SetDoguDataVolumeSize_Call struct {
	*mock.Call
}

// SetDoguDataVolumeSize is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
func (_e *MockDoguManager_Expecter) SetDoguDataVolumeSize(ctx interface{}, doguResource interface{}) *MockDoguManager_SetDoguDataVolumeSize_Call {
	return &MockDoguManager_SetDoguDataVolumeSize_Call{Call: _e.mock.On("SetDoguDataVolumeSize", ctx, doguResource)}
}

func (_c *MockDoguManager_SetDoguDataVolumeSize_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu)) *MockDoguManager_SetDoguDataVolumeSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu))
	})
	return _c
}

func (_c *MockDoguManager_SetDoguDataVolumeSize_Call) Return(_a0 error) *MockDoguManager_SetDoguDataVolumeSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguManager_SetDoguDataVolumeSize_Call) RunAndReturn(run func(context.Context, *v2.Dogu) error) *MockDoguManager_SetDoguDataVolumeSize_Call {
	_c.Call.Return(run)
	return _c
}

// StartDogu provides a mock function with given fields: ctx, doguResource
func (_m *MockDoguManager) StartDogu(ctx context.Context, doguResource *v2.Dogu) error {
	ret := _m.Called(ctx, doguResource)

	if len(ret) == 0 {
		panic("no return value specified for StartDogu")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu) error); ok {
		r0 = rf(ctx, doguResource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguManager_StartDogu_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartDogu'
type MockDoguManager_StartDogu_Call struct {
	*mock.Call
}

// StartDogu is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
func (_e *MockDoguManager_Expecter) StartDogu(ctx interface{}, doguResource interface{}) *MockDoguManager_StartDogu_Call {
	return &MockDoguManager_StartDogu_Call{Call: _e.mock.On("StartDogu", ctx, doguResource)}
}

func (_c *MockDoguManager_StartDogu_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu)) *MockDoguManager_StartDogu_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu))
	})
	return _c
}

func (_c *MockDoguManager_StartDogu_Call) Return(_a0 error) *MockDoguManager_StartDogu_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguManager_StartDogu_Call) RunAndReturn(run func(context.Context, *v2.Dogu) error) *MockDoguManager_StartDogu_Call {
	_c.Call.Return(run)
	return _c
}

// StopDogu provides a mock function with given fields: ctx, doguResource
func (_m *MockDoguManager) StopDogu(ctx context.Context, doguResource *v2.Dogu) error {
	ret := _m.Called(ctx, doguResource)

	if len(ret) == 0 {
		panic("no return value specified for StopDogu")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu) error); ok {
		r0 = rf(ctx, doguResource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguManager_StopDogu_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopDogu'
type MockDoguManager_StopDogu_Call struct {
	*mock.Call
}

// StopDogu is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
func (_e *MockDoguManager_Expecter) StopDogu(ctx interface{}, doguResource interface{}) *MockDoguManager_StopDogu_Call {
	return &MockDoguManager_StopDogu_Call{Call: _e.mock.On("StopDogu", ctx, doguResource)}
}

func (_c *MockDoguManager_StopDogu_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu)) *MockDoguManager_StopDogu_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu))
	})
	return _c
}

func (_c *MockDoguManager_StopDogu_Call) Return(_a0 error) *MockDoguManager_StopDogu_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguManager_StopDogu_Call) RunAndReturn(run func(context.Context, *v2.Dogu) error) *MockDoguManager_StopDogu_Call {
	_c.Call.Return(run)
	return _c
}

// Upgrade provides a mock function with given fields: ctx, doguResource
func (_m *MockDoguManager) Upgrade(ctx context.Context, doguResource *v2.Dogu) error {
	ret := _m.Called(ctx, doguResource)

	if len(ret) == 0 {
		panic("no return value specified for Upgrade")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu) error); ok {
		r0 = rf(ctx, doguResource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguManager_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type MockDoguManager_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
func (_e *MockDoguManager_Expecter) Upgrade(ctx interface{}, doguResource interface{}) *MockDoguManager_Upgrade_Call {
	return &MockDoguManager_Upgrade_Call{Call: _e.mock.On("Upgrade", ctx, doguResource)}
}

func (_c *MockDoguManager_Upgrade_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu)) *MockDoguManager_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu))
	})
	return _c
}

func (_c *MockDoguManager_Upgrade_Call) Return(_a0 error) *MockDoguManager_Upgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguManager_Upgrade_Call) RunAndReturn(run func(context.Context, *v2.Dogu) error) *MockDoguManager_Upgrade_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDoguManager creates a new instance of MockDoguManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDoguManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDoguManager {
	mock := &MockDoguManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

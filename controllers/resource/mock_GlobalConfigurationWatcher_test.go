// Code generated by mockery v2.42.1. DO NOT EDIT.

package resource

import (
	context "context"

	registry "github.com/cloudogu/k8s-registry-lib/registry"
	mock "github.com/stretchr/testify/mock"
)

// MockGlobalConfigurationWatcher is an autogenerated mock type for the GlobalConfigurationWatcher type
type MockGlobalConfigurationWatcher struct {
	mock.Mock
}

type MockGlobalConfigurationWatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGlobalConfigurationWatcher) EXPECT() *MockGlobalConfigurationWatcher_Expecter {
	return &MockGlobalConfigurationWatcher_Expecter{mock: &_m.Mock}
}

// Watch provides a mock function with given fields: ctx, key, recursive
func (_m *MockGlobalConfigurationWatcher) Watch(ctx context.Context, key string, recursive bool) (registry.ConfigWatch, error) {
	ret := _m.Called(ctx, key, recursive)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 registry.ConfigWatch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (registry.ConfigWatch, error)); ok {
		return rf(ctx, key, recursive)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) registry.ConfigWatch); ok {
		r0 = rf(ctx, key, recursive)
	} else {
		r0 = ret.Get(0).(registry.ConfigWatch)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, key, recursive)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGlobalConfigurationWatcher_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockGlobalConfigurationWatcher_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - recursive bool
func (_e *MockGlobalConfigurationWatcher_Expecter) Watch(ctx interface{}, key interface{}, recursive interface{}) *MockGlobalConfigurationWatcher_Watch_Call {
	return &MockGlobalConfigurationWatcher_Watch_Call{Call: _e.mock.On("Watch", ctx, key, recursive)}
}

func (_c *MockGlobalConfigurationWatcher_Watch_Call) Run(run func(ctx context.Context, key string, recursive bool)) *MockGlobalConfigurationWatcher_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockGlobalConfigurationWatcher_Watch_Call) Return(_a0 registry.ConfigWatch, _a1 error) *MockGlobalConfigurationWatcher_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGlobalConfigurationWatcher_Watch_Call) RunAndReturn(run func(context.Context, string, bool) (registry.ConfigWatch, error)) *MockGlobalConfigurationWatcher_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGlobalConfigurationWatcher creates a new instance of MockGlobalConfigurationWatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGlobalConfigurationWatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGlobalConfigurationWatcher {
	mock := &MockGlobalConfigurationWatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package mocks

import (
	apiv1 "github.com/cloudogu/k8s-dogu-operator/api/v1"
	limit "github.com/cloudogu/k8s-dogu-operator/controllers/limit"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/apps/v1"
)

// LimitPatcher is an autogenerated mock type for the LimitPatcher type
type LimitPatcher struct {
	mock.Mock
}

// PatchDeployment provides a mock function with given fields: deployment, limits
func (_m *LimitPatcher) PatchDeployment(deployment *v1.Deployment, limits limit.DoguLimits) error {
	ret := _m.Called(deployment, limits)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Deployment, limit.DoguLimits) error); ok {
		r0 = rf(deployment, limits)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveMemoryLimits provides a mock function with given fields: doguResource
func (_m *LimitPatcher) RetrieveMemoryLimits(doguResource *apiv1.Dogu) (limit.DoguLimits, error) {
	ret := _m.Called(doguResource)

	var r0 limit.DoguLimits
	if rf, ok := ret.Get(0).(func(*apiv1.Dogu) limit.DoguLimits); ok {
		r0 = rf(doguResource)
	} else {
		r0 = ret.Get(0).(limit.DoguLimits)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*apiv1.Dogu) error); ok {
		r1 = rf(doguResource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type newLimitPatcherT interface {
	mock.TestingT
	Cleanup(func())
}

// newLimitPatcher creates a new instance of LimitPatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newLimitPatcher(t newLimitPatcherT) *LimitPatcher {
	mock := &LimitPatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

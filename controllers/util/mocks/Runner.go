// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	genericclioptions "k8s.io/cli-runtime/pkg/genericclioptions"

	resource "github.com/cloudogu/k8s-dogu-operator/controllers/resource"
)

// Runner is an autogenerated mock type for the Runner type
type Runner struct {
	mock.Mock
}

// Run provides a mock function with given fields:
func (_m *Runner) Run() (genericclioptions.IOStreams, error) {
	ret := _m.Called()

	var r0 genericclioptions.IOStreams
	if rf, ok := ret.Get(0).(func() genericclioptions.IOStreams); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(genericclioptions.IOStreams)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCommand provides a mock function with given fields: command
func (_m *Runner) SetCommand(command *resource.ShellCommand) {
	_m.Called(command)
}

type mockConstructorTestingTNewRunner interface {
	mock.TestingT
	Cleanup(func())
}

// NewRunner creates a new instance of Runner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRunner(t mockConstructorTestingTNewRunner) *Runner {
	mock := &Runner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

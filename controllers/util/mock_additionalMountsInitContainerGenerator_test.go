// Code generated by mockery v2.53.3. DO NOT EDIT.

package util

import (
	core "github.com/cloudogu/cesapp-lib/core"
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"

	v2 "github.com/cloudogu/k8s-dogu-lib/v2/api/v2"
)

// mockAdditionalMountsInitContainerGenerator is an autogenerated mock type for the additionalMountsInitContainerGenerator type
type mockAdditionalMountsInitContainerGenerator struct {
	mock.Mock
}

type mockAdditionalMountsInitContainerGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAdditionalMountsInitContainerGenerator) EXPECT() *mockAdditionalMountsInitContainerGenerator_Expecter {
	return &mockAdditionalMountsInitContainerGenerator_Expecter{mock: &_m.Mock}
}

// BuildAdditionalMountInitContainer provides a mock function with given fields: dogu, doguResource, image, requirements
func (_m *mockAdditionalMountsInitContainerGenerator) BuildAdditionalMountInitContainer(dogu *core.Dogu, doguResource *v2.Dogu, image string, requirements v1.ResourceRequirements) (*v1.Container, error) {
	ret := _m.Called(dogu, doguResource, image, requirements)

	if len(ret) == 0 {
		panic("no return value specified for BuildAdditionalMountInitContainer")
	}

	var r0 *v1.Container
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.Dogu, *v2.Dogu, string, v1.ResourceRequirements) (*v1.Container, error)); ok {
		return rf(dogu, doguResource, image, requirements)
	}
	if rf, ok := ret.Get(0).(func(*core.Dogu, *v2.Dogu, string, v1.ResourceRequirements) *v1.Container); ok {
		r0 = rf(dogu, doguResource, image, requirements)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Container)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.Dogu, *v2.Dogu, string, v1.ResourceRequirements) error); ok {
		r1 = rf(dogu, doguResource, image, requirements)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockAdditionalMountsInitContainerGenerator_BuildAdditionalMountInitContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildAdditionalMountInitContainer'
type mockAdditionalMountsInitContainerGenerator_BuildAdditionalMountInitContainer_Call struct {
	*mock.Call
}

// BuildAdditionalMountInitContainer is a helper method to define mock.On call
//   - dogu *core.Dogu
//   - doguResource *v2.Dogu
//   - image string
//   - requirements v1.ResourceRequirements
func (_e *mockAdditionalMountsInitContainerGenerator_Expecter) BuildAdditionalMountInitContainer(dogu interface{}, doguResource interface{}, image interface{}, requirements interface{}) *mockAdditionalMountsInitContainerGenerator_BuildAdditionalMountInitContainer_Call {
	return &mockAdditionalMountsInitContainerGenerator_BuildAdditionalMountInitContainer_Call{Call: _e.mock.On("BuildAdditionalMountInitContainer", dogu, doguResource, image, requirements)}
}

func (_c *mockAdditionalMountsInitContainerGenerator_BuildAdditionalMountInitContainer_Call) Run(run func(dogu *core.Dogu, doguResource *v2.Dogu, image string, requirements v1.ResourceRequirements)) *mockAdditionalMountsInitContainerGenerator_BuildAdditionalMountInitContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.Dogu), args[1].(*v2.Dogu), args[2].(string), args[3].(v1.ResourceRequirements))
	})
	return _c
}

func (_c *mockAdditionalMountsInitContainerGenerator_BuildAdditionalMountInitContainer_Call) Return(_a0 *v1.Container, _a1 error) *mockAdditionalMountsInitContainerGenerator_BuildAdditionalMountInitContainer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockAdditionalMountsInitContainerGenerator_BuildAdditionalMountInitContainer_Call) RunAndReturn(run func(*core.Dogu, *v2.Dogu, string, v1.ResourceRequirements) (*v1.Container, error)) *mockAdditionalMountsInitContainerGenerator_BuildAdditionalMountInitContainer_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAdditionalMountsInitContainerGenerator creates a new instance of mockAdditionalMountsInitContainerGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAdditionalMountsInitContainerGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAdditionalMountsInitContainerGenerator {
	mock := &mockAdditionalMountsInitContainerGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

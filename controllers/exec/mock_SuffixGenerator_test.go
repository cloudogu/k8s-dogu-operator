// Code generated by mockery v2.46.2. DO NOT EDIT.

package exec

import mock "github.com/stretchr/testify/mock"

// MockSuffixGenerator is an autogenerated mock type for the SuffixGenerator type
type MockSuffixGenerator struct {
	mock.Mock
}

type MockSuffixGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSuffixGenerator) EXPECT() *MockSuffixGenerator_Expecter {
	return &MockSuffixGenerator_Expecter{mock: &_m.Mock}
}

// String provides a mock function with given fields: length
func (_m *MockSuffixGenerator) String(length int) string {
	ret := _m.Called(length)

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(length)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSuffixGenerator_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockSuffixGenerator_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
//   - length int
func (_e *MockSuffixGenerator_Expecter) String(length interface{}) *MockSuffixGenerator_String_Call {
	return &MockSuffixGenerator_String_Call{Call: _e.mock.On("String", length)}
}

func (_c *MockSuffixGenerator_String_Call) Run(run func(length int)) *MockSuffixGenerator_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockSuffixGenerator_String_Call) Return(_a0 string) *MockSuffixGenerator_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSuffixGenerator_String_Call) RunAndReturn(run func(int) string) *MockSuffixGenerator_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSuffixGenerator creates a new instance of MockSuffixGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSuffixGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSuffixGenerator {
	mock := &MockSuffixGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.3. DO NOT EDIT.

package exec

import (
	bytes "bytes"
	context "context"

	core "github.com/cloudogu/cesapp-lib/core"

	mock "github.com/stretchr/testify/mock"

	v2 "github.com/cloudogu/k8s-dogu-lib/v2/api/v2"
)

// MockExecPodFactory is an autogenerated mock type for the ExecPodFactory type
type MockExecPodFactory struct {
	mock.Mock
}

type MockExecPodFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecPodFactory) EXPECT() *MockExecPodFactory_Expecter {
	return &MockExecPodFactory_Expecter{mock: &_m.Mock}
}

// CheckReady provides a mock function with given fields: ctx, doguResource, dogu
func (_m *MockExecPodFactory) CheckReady(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu) error {
	ret := _m.Called(ctx, doguResource, dogu)

	if len(ret) == 0 {
		panic("no return value specified for CheckReady")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu, *core.Dogu) error); ok {
		r0 = rf(ctx, doguResource, dogu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecPodFactory_CheckReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckReady'
type MockExecPodFactory_CheckReady_Call struct {
	*mock.Call
}

// CheckReady is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
//   - dogu *core.Dogu
func (_e *MockExecPodFactory_Expecter) CheckReady(ctx interface{}, doguResource interface{}, dogu interface{}) *MockExecPodFactory_CheckReady_Call {
	return &MockExecPodFactory_CheckReady_Call{Call: _e.mock.On("CheckReady", ctx, doguResource, dogu)}
}

func (_c *MockExecPodFactory_CheckReady_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu)) *MockExecPodFactory_CheckReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu), args[2].(*core.Dogu))
	})
	return _c
}

func (_c *MockExecPodFactory_CheckReady_Call) Return(_a0 error) *MockExecPodFactory_CheckReady_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecPodFactory_CheckReady_Call) RunAndReturn(run func(context.Context, *v2.Dogu, *core.Dogu) error) *MockExecPodFactory_CheckReady_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBlocking provides a mock function with given fields: ctx, doguResource, dogu
func (_m *MockExecPodFactory) CreateBlocking(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu) error {
	ret := _m.Called(ctx, doguResource, dogu)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlocking")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu, *core.Dogu) error); ok {
		r0 = rf(ctx, doguResource, dogu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecPodFactory_CreateBlocking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBlocking'
type MockExecPodFactory_CreateBlocking_Call struct {
	*mock.Call
}

// CreateBlocking is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
//   - dogu *core.Dogu
func (_e *MockExecPodFactory_Expecter) CreateBlocking(ctx interface{}, doguResource interface{}, dogu interface{}) *MockExecPodFactory_CreateBlocking_Call {
	return &MockExecPodFactory_CreateBlocking_Call{Call: _e.mock.On("CreateBlocking", ctx, doguResource, dogu)}
}

func (_c *MockExecPodFactory_CreateBlocking_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu)) *MockExecPodFactory_CreateBlocking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu), args[2].(*core.Dogu))
	})
	return _c
}

func (_c *MockExecPodFactory_CreateBlocking_Call) Return(_a0 error) *MockExecPodFactory_CreateBlocking_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecPodFactory_CreateBlocking_Call) RunAndReturn(run func(context.Context, *v2.Dogu, *core.Dogu) error) *MockExecPodFactory_CreateBlocking_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdate provides a mock function with given fields: ctx, doguResource, dogu
func (_m *MockExecPodFactory) CreateOrUpdate(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu) error {
	ret := _m.Called(ctx, doguResource, dogu)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu, *core.Dogu) error); ok {
		r0 = rf(ctx, doguResource, dogu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecPodFactory_CreateOrUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdate'
type MockExecPodFactory_CreateOrUpdate_Call struct {
	*mock.Call
}

// CreateOrUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
//   - dogu *core.Dogu
func (_e *MockExecPodFactory_Expecter) CreateOrUpdate(ctx interface{}, doguResource interface{}, dogu interface{}) *MockExecPodFactory_CreateOrUpdate_Call {
	return &MockExecPodFactory_CreateOrUpdate_Call{Call: _e.mock.On("CreateOrUpdate", ctx, doguResource, dogu)}
}

func (_c *MockExecPodFactory_CreateOrUpdate_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu)) *MockExecPodFactory_CreateOrUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu), args[2].(*core.Dogu))
	})
	return _c
}

func (_c *MockExecPodFactory_CreateOrUpdate_Call) Return(_a0 error) *MockExecPodFactory_CreateOrUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecPodFactory_CreateOrUpdate_Call) RunAndReturn(run func(context.Context, *v2.Dogu, *core.Dogu) error) *MockExecPodFactory_CreateOrUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, doguResource, dogu
func (_m *MockExecPodFactory) Delete(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu) error {
	ret := _m.Called(ctx, doguResource, dogu)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu, *core.Dogu) error); ok {
		r0 = rf(ctx, doguResource, dogu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecPodFactory_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockExecPodFactory_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
//   - dogu *core.Dogu
func (_e *MockExecPodFactory_Expecter) Delete(ctx interface{}, doguResource interface{}, dogu interface{}) *MockExecPodFactory_Delete_Call {
	return &MockExecPodFactory_Delete_Call{Call: _e.mock.On("Delete", ctx, doguResource, dogu)}
}

func (_c *MockExecPodFactory_Delete_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu)) *MockExecPodFactory_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu), args[2].(*core.Dogu))
	})
	return _c
}

func (_c *MockExecPodFactory_Delete_Call) Return(_a0 error) *MockExecPodFactory_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecPodFactory_Delete_Call) RunAndReturn(run func(context.Context, *v2.Dogu, *core.Dogu) error) *MockExecPodFactory_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: ctx, doguResource, dogu, cmd
func (_m *MockExecPodFactory) Exec(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu, cmd ShellCommand) (*bytes.Buffer, error) {
	ret := _m.Called(ctx, doguResource, dogu, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 *bytes.Buffer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu, *core.Dogu, ShellCommand) (*bytes.Buffer, error)); ok {
		return rf(ctx, doguResource, dogu, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu, *core.Dogu, ShellCommand) *bytes.Buffer); ok {
		r0 = rf(ctx, doguResource, dogu, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.Dogu, *core.Dogu, ShellCommand) error); ok {
		r1 = rf(ctx, doguResource, dogu, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecPodFactory_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockExecPodFactory_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
//   - dogu *core.Dogu
//   - cmd ShellCommand
func (_e *MockExecPodFactory_Expecter) Exec(ctx interface{}, doguResource interface{}, dogu interface{}, cmd interface{}) *MockExecPodFactory_Exec_Call {
	return &MockExecPodFactory_Exec_Call{Call: _e.mock.On("Exec", ctx, doguResource, dogu, cmd)}
}

func (_c *MockExecPodFactory_Exec_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu, cmd ShellCommand)) *MockExecPodFactory_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu), args[2].(*core.Dogu), args[3].(ShellCommand))
	})
	return _c
}

func (_c *MockExecPodFactory_Exec_Call) Return(out *bytes.Buffer, err error) *MockExecPodFactory_Exec_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *MockExecPodFactory_Exec_Call) RunAndReturn(run func(context.Context, *v2.Dogu, *core.Dogu, ShellCommand) (*bytes.Buffer, error)) *MockExecPodFactory_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, doguResource, dogu
func (_m *MockExecPodFactory) Exists(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu) bool {
	ret := _m.Called(ctx, doguResource, dogu)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu, *core.Dogu) bool); ok {
		r0 = rf(ctx, doguResource, dogu)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockExecPodFactory_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockExecPodFactory_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
//   - dogu *core.Dogu
func (_e *MockExecPodFactory_Expecter) Exists(ctx interface{}, doguResource interface{}, dogu interface{}) *MockExecPodFactory_Exists_Call {
	return &MockExecPodFactory_Exists_Call{Call: _e.mock.On("Exists", ctx, doguResource, dogu)}
}

func (_c *MockExecPodFactory_Exists_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu)) *MockExecPodFactory_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu), args[2].(*core.Dogu))
	})
	return _c
}

func (_c *MockExecPodFactory_Exists_Call) Return(_a0 bool) *MockExecPodFactory_Exists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecPodFactory_Exists_Call) RunAndReturn(run func(context.Context, *v2.Dogu, *core.Dogu) bool) *MockExecPodFactory_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecPodFactory creates a new instance of MockExecPodFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecPodFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecPodFactory {
	mock := &MockExecPodFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

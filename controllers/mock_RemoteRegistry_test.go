// Code generated by mockery v2.46.2. DO NOT EDIT.

package controllers

import (
	core "github.com/cloudogu/cesapp-lib/core"
	mock "github.com/stretchr/testify/mock"
)

// MockRemoteRegistry is an autogenerated mock type for the RemoteRegistry type
type MockRemoteRegistry struct {
	mock.Mock
}

type MockRemoteRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemoteRegistry) EXPECT() *MockRemoteRegistry_Expecter {
	return &MockRemoteRegistry_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: dogu
func (_m *MockRemoteRegistry) Create(dogu *core.Dogu) error {
	ret := _m.Called(dogu)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*core.Dogu) error); ok {
		r0 = rf(dogu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteRegistry_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRemoteRegistry_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - dogu *core.Dogu
func (_e *MockRemoteRegistry_Expecter) Create(dogu interface{}) *MockRemoteRegistry_Create_Call {
	return &MockRemoteRegistry_Create_Call{Call: _e.mock.On("Create", dogu)}
}

func (_c *MockRemoteRegistry_Create_Call) Run(run func(dogu *core.Dogu)) *MockRemoteRegistry_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.Dogu))
	})
	return _c
}

func (_c *MockRemoteRegistry_Create_Call) Return(_a0 error) *MockRemoteRegistry_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteRegistry_Create_Call) RunAndReturn(run func(*core.Dogu) error) *MockRemoteRegistry_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: dogu
func (_m *MockRemoteRegistry) Delete(dogu *core.Dogu) error {
	ret := _m.Called(dogu)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*core.Dogu) error); ok {
		r0 = rf(dogu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteRegistry_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRemoteRegistry_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - dogu *core.Dogu
func (_e *MockRemoteRegistry_Expecter) Delete(dogu interface{}) *MockRemoteRegistry_Delete_Call {
	return &MockRemoteRegistry_Delete_Call{Call: _e.mock.On("Delete", dogu)}
}

func (_c *MockRemoteRegistry_Delete_Call) Run(run func(dogu *core.Dogu)) *MockRemoteRegistry_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.Dogu))
	})
	return _c
}

func (_c *MockRemoteRegistry_Delete_Call) Return(_a0 error) *MockRemoteRegistry_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteRegistry_Delete_Call) RunAndReturn(run func(*core.Dogu) error) *MockRemoteRegistry_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: name
func (_m *MockRemoteRegistry) Get(name string) (*core.Dogu, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *core.Dogu
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*core.Dogu, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *core.Dogu); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Dogu)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteRegistry_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRemoteRegistry_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - name string
func (_e *MockRemoteRegistry_Expecter) Get(name interface{}) *MockRemoteRegistry_Get_Call {
	return &MockRemoteRegistry_Get_Call{Call: _e.mock.On("Get", name)}
}

func (_c *MockRemoteRegistry_Get_Call) Run(run func(name string)) *MockRemoteRegistry_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRemoteRegistry_Get_Call) Return(_a0 *core.Dogu, _a1 error) *MockRemoteRegistry_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteRegistry_Get_Call) RunAndReturn(run func(string) (*core.Dogu, error)) *MockRemoteRegistry_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *MockRemoteRegistry) GetAll() ([]*core.Dogu, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*core.Dogu
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*core.Dogu, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*core.Dogu); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*core.Dogu)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteRegistry_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockRemoteRegistry_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockRemoteRegistry_Expecter) GetAll() *MockRemoteRegistry_GetAll_Call {
	return &MockRemoteRegistry_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockRemoteRegistry_GetAll_Call) Run(run func()) *MockRemoteRegistry_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRemoteRegistry_GetAll_Call) Return(_a0 []*core.Dogu, _a1 error) *MockRemoteRegistry_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteRegistry_GetAll_Call) RunAndReturn(run func() ([]*core.Dogu, error)) *MockRemoteRegistry_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersion provides a mock function with given fields: name, version
func (_m *MockRemoteRegistry) GetVersion(name string, version string) (*core.Dogu, error) {
	ret := _m.Called(name, version)

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 *core.Dogu
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*core.Dogu, error)); ok {
		return rf(name, version)
	}
	if rf, ok := ret.Get(0).(func(string, string) *core.Dogu); ok {
		r0 = rf(name, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Dogu)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteRegistry_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type MockRemoteRegistry_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
//   - name string
//   - version string
func (_e *MockRemoteRegistry_Expecter) GetVersion(name interface{}, version interface{}) *MockRemoteRegistry_GetVersion_Call {
	return &MockRemoteRegistry_GetVersion_Call{Call: _e.mock.On("GetVersion", name, version)}
}

func (_c *MockRemoteRegistry_GetVersion_Call) Run(run func(name string, version string)) *MockRemoteRegistry_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRemoteRegistry_GetVersion_Call) Return(_a0 *core.Dogu, _a1 error) *MockRemoteRegistry_GetVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteRegistry_GetVersion_Call) RunAndReturn(run func(string, string) (*core.Dogu, error)) *MockRemoteRegistry_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersionsOf provides a mock function with given fields: name
func (_m *MockRemoteRegistry) GetVersionsOf(name string) ([]core.Version, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetVersionsOf")
	}

	var r0 []core.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]core.Version, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []core.Version); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Version)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteRegistry_GetVersionsOf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersionsOf'
type MockRemoteRegistry_GetVersionsOf_Call struct {
	*mock.Call
}

// GetVersionsOf is a helper method to define mock.On call
//   - name string
func (_e *MockRemoteRegistry_Expecter) GetVersionsOf(name interface{}) *MockRemoteRegistry_GetVersionsOf_Call {
	return &MockRemoteRegistry_GetVersionsOf_Call{Call: _e.mock.On("GetVersionsOf", name)}
}

func (_c *MockRemoteRegistry_GetVersionsOf_Call) Run(run func(name string)) *MockRemoteRegistry_GetVersionsOf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRemoteRegistry_GetVersionsOf_Call) Return(_a0 []core.Version, _a1 error) *MockRemoteRegistry_GetVersionsOf_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteRegistry_GetVersionsOf_Call) RunAndReturn(run func(string) ([]core.Version, error)) *MockRemoteRegistry_GetVersionsOf_Call {
	_c.Call.Return(run)
	return _c
}

// SetUseCache provides a mock function with given fields: useCache
func (_m *MockRemoteRegistry) SetUseCache(useCache bool) {
	_m.Called(useCache)
}

// MockRemoteRegistry_SetUseCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUseCache'
type MockRemoteRegistry_SetUseCache_Call struct {
	*mock.Call
}

// SetUseCache is a helper method to define mock.On call
//   - useCache bool
func (_e *MockRemoteRegistry_Expecter) SetUseCache(useCache interface{}) *MockRemoteRegistry_SetUseCache_Call {
	return &MockRemoteRegistry_SetUseCache_Call{Call: _e.mock.On("SetUseCache", useCache)}
}

func (_c *MockRemoteRegistry_SetUseCache_Call) Run(run func(useCache bool)) *MockRemoteRegistry_SetUseCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockRemoteRegistry_SetUseCache_Call) Return() *MockRemoteRegistry_SetUseCache_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRemoteRegistry_SetUseCache_Call) RunAndReturn(run func(bool)) *MockRemoteRegistry_SetUseCache_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRemoteRegistry creates a new instance of MockRemoteRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemoteRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemoteRegistry {
	mock := &MockRemoteRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

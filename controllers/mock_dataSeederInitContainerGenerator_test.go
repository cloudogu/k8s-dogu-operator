// Code generated by mockery v2.53.3. DO NOT EDIT.

package controllers

import (
	core "github.com/cloudogu/cesapp-lib/core"
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"

	v2 "github.com/cloudogu/k8s-dogu-lib/v2/api/v2"
)

// mockDataSeederInitContainerGenerator is an autogenerated mock type for the dataSeederInitContainerGenerator type
type mockDataSeederInitContainerGenerator struct {
	mock.Mock
}

type mockDataSeederInitContainerGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDataSeederInitContainerGenerator) EXPECT() *mockDataSeederInitContainerGenerator_Expecter {
	return &mockDataSeederInitContainerGenerator_Expecter{mock: &_m.Mock}
}

// BuildDataSeederContainer provides a mock function with given fields: dogu, doguResource, image
func (_m *mockDataSeederInitContainerGenerator) BuildDataSeederContainer(dogu *core.Dogu, doguResource *v2.Dogu, image string) (*v1.Container, error) {
	ret := _m.Called(dogu, doguResource, image)

	if len(ret) == 0 {
		panic("no return value specified for BuildDataSeederContainer")
	}

	var r0 *v1.Container
	var r1 error
	if rf, ok := ret.Get(0).(func(*core.Dogu, *v2.Dogu, string) (*v1.Container, error)); ok {
		return rf(dogu, doguResource, image)
	}
	if rf, ok := ret.Get(0).(func(*core.Dogu, *v2.Dogu, string) *v1.Container); ok {
		r0 = rf(dogu, doguResource, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Container)
		}
	}

	if rf, ok := ret.Get(1).(func(*core.Dogu, *v2.Dogu, string) error); ok {
		r1 = rf(dogu, doguResource, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataSeederInitContainerGenerator_BuildDataSeederContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildDataSeederContainer'
type mockDataSeederInitContainerGenerator_BuildDataSeederContainer_Call struct {
	*mock.Call
}

// BuildDataSeederContainer is a helper method to define mock.On call
//   - dogu *core.Dogu
//   - doguResource *v2.Dogu
//   - image string
func (_e *mockDataSeederInitContainerGenerator_Expecter) BuildDataSeederContainer(dogu interface{}, doguResource interface{}, image interface{}) *mockDataSeederInitContainerGenerator_BuildDataSeederContainer_Call {
	return &mockDataSeederInitContainerGenerator_BuildDataSeederContainer_Call{Call: _e.mock.On("BuildDataSeederContainer", dogu, doguResource, image)}
}

func (_c *mockDataSeederInitContainerGenerator_BuildDataSeederContainer_Call) Run(run func(dogu *core.Dogu, doguResource *v2.Dogu, image string)) *mockDataSeederInitContainerGenerator_BuildDataSeederContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*core.Dogu), args[1].(*v2.Dogu), args[2].(string))
	})
	return _c
}

func (_c *mockDataSeederInitContainerGenerator_BuildDataSeederContainer_Call) Return(_a0 *v1.Container, _a1 error) *mockDataSeederInitContainerGenerator_BuildDataSeederContainer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataSeederInitContainerGenerator_BuildDataSeederContainer_Call) RunAndReturn(run func(*core.Dogu, *v2.Dogu, string) (*v1.Container, error)) *mockDataSeederInitContainerGenerator_BuildDataSeederContainer_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDataSeederInitContainerGenerator creates a new instance of mockDataSeederInitContainerGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDataSeederInitContainerGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDataSeederInitContainerGenerator {
	mock := &mockDataSeederInitContainerGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

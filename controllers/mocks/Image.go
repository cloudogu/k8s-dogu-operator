// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	v1 "github.com/google/go-containerregistry/pkg/v1"
	types "github.com/google/go-containerregistry/pkg/v1/types"
	mock "github.com/stretchr/testify/mock"
)

// Image is an autogenerated mock type for the Image type
type Image struct {
	mock.Mock
}

// ConfigFile provides a mock function with given fields:
func (_m *Image) ConfigFile() (*v1.ConfigFile, error) {
	ret := _m.Called()

	var r0 *v1.ConfigFile
	if rf, ok := ret.Get(0).(func() *v1.ConfigFile); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ConfigFile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigName provides a mock function with given fields:
func (_m *Image) ConfigName() (v1.Hash, error) {
	ret := _m.Called()

	var r0 v1.Hash
	if rf, ok := ret.Get(0).(func() v1.Hash); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.Hash)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Digest provides a mock function with given fields:
func (_m *Image) Digest() (v1.Hash, error) {
	ret := _m.Called()

	var r0 v1.Hash
	if rf, ok := ret.Get(0).(func() v1.Hash); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.Hash)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LayerByDiffID provides a mock function with given fields: _a0
func (_m *Image) LayerByDiffID(_a0 v1.Hash) (v1.Layer, error) {
	ret := _m.Called(_a0)

	var r0 v1.Layer
	if rf, ok := ret.Get(0).(func(v1.Hash) v1.Layer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.Layer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(v1.Hash) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LayerByDigest provides a mock function with given fields: _a0
func (_m *Image) LayerByDigest(_a0 v1.Hash) (v1.Layer, error) {
	ret := _m.Called(_a0)

	var r0 v1.Layer
	if rf, ok := ret.Get(0).(func(v1.Hash) v1.Layer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.Layer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(v1.Hash) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Layers provides a mock function with given fields:
func (_m *Image) Layers() ([]v1.Layer, error) {
	ret := _m.Called()

	var r0 []v1.Layer
	if rf, ok := ret.Get(0).(func() []v1.Layer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.Layer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Manifest provides a mock function with given fields:
func (_m *Image) Manifest() (*v1.Manifest, error) {
	ret := _m.Called()

	var r0 *v1.Manifest
	if rf, ok := ret.Get(0).(func() *v1.Manifest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Manifest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MediaType provides a mock function with given fields:
func (_m *Image) MediaType() (types.MediaType, error) {
	ret := _m.Called()

	var r0 types.MediaType
	if rf, ok := ret.Get(0).(func() types.MediaType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.MediaType)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawConfigFile provides a mock function with given fields:
func (_m *Image) RawConfigFile() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RawManifest provides a mock function with given fields:
func (_m *Image) RawManifest() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Size provides a mock function with given fields:
func (_m *Image) Size() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	appsv1 "k8s.io/api/apps/v1"

	core "github.com/cloudogu/cesapp-lib/core"

	mock "github.com/stretchr/testify/mock"

	pkgv1 "github.com/google/go-containerregistry/pkg/v1"

	v1 "github.com/cloudogu/k8s-dogu-operator/api/v1"
)

// ResourceUpserter is an autogenerated mock type for the resourceUpserter type
type ResourceUpserter struct {
	mock.Mock
}

// ApplyDoguResource provides a mock function with given fields: ctx, doguResource, dogu, image, customDeployment
func (_m *ResourceUpserter) ApplyDoguResource(ctx context.Context, doguResource *v1.Dogu, dogu *core.Dogu, image *pkgv1.ConfigFile, customDeployment *appsv1.Deployment) error {
	ret := _m.Called(ctx, doguResource, dogu, image, customDeployment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Dogu, *core.Dogu, *pkgv1.ConfigFile, *appsv1.Deployment) error); ok {
		r0 = rf(ctx, doguResource, dogu, image, customDeployment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewResourceUpserter interface {
	mock.TestingT
	Cleanup(func())
}

// newResourceUpserter creates a new instance of resourceUpserter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newResourceUpserter(t mockConstructorTestingTnewResourceUpserter) *ResourceUpserter {
	mock := &ResourceUpserter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

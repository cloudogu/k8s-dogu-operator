// Code generated by mockery v2.53.5. DO NOT EDIT.

package additionalMount

import (
	context "context"

	corev1 "k8s.io/api/core/v1"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// mockSecretGetter is an autogenerated mock type for the secretGetter type
type mockSecretGetter struct {
	mock.Mock
}

type mockSecretGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSecretGetter) EXPECT() *mockSecretGetter_Expecter {
	return &mockSecretGetter_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, name, opts
func (_m *mockSecretGetter) Get(ctx context.Context, name string, opts v1.GetOptions) (*corev1.Secret, error) {
	ret := _m.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *corev1.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.GetOptions) (*corev1.Secret, error)); ok {
		return rf(ctx, name, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.GetOptions) *corev1.Secret); ok {
		r0 = rf(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, v1.GetOptions) error); ok {
		r1 = rf(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockSecretGetter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockSecretGetter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts v1.GetOptions
func (_e *mockSecretGetter_Expecter) Get(ctx interface{}, name interface{}, opts interface{}) *mockSecretGetter_Get_Call {
	return &mockSecretGetter_Get_Call{Call: _e.mock.On("Get", ctx, name, opts)}
}

func (_c *mockSecretGetter_Get_Call) Run(run func(ctx context.Context, name string, opts v1.GetOptions)) *mockSecretGetter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(v1.GetOptions))
	})
	return _c
}

func (_c *mockSecretGetter_Get_Call) Return(_a0 *corev1.Secret, _a1 error) *mockSecretGetter_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSecretGetter_Get_Call) RunAndReturn(run func(context.Context, string, v1.GetOptions) (*corev1.Secret, error)) *mockSecretGetter_Get_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSecretGetter creates a new instance of mockSecretGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSecretGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSecretGetter {
	mock := &mockSecretGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

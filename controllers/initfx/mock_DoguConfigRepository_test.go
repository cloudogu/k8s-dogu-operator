// Code generated by mockery v2.53.5. DO NOT EDIT.

package initfx

import (
	context "context"

	config "github.com/cloudogu/k8s-registry-lib/config"

	dogu "github.com/cloudogu/ces-commons-lib/dogu"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/cloudogu/k8s-registry-lib/repository"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockDoguConfigRepository is an autogenerated mock type for the DoguConfigRepository type
type MockDoguConfigRepository struct {
	mock.Mock
}

type MockDoguConfigRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDoguConfigRepository) EXPECT() *MockDoguConfigRepository_Expecter {
	return &MockDoguConfigRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, doguConfig
func (_m *MockDoguConfigRepository) Create(ctx context.Context, doguConfig config.DoguConfig) (config.DoguConfig, error) {
	ret := _m.Called(ctx, doguConfig)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 config.DoguConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.DoguConfig) (config.DoguConfig, error)); ok {
		return rf(ctx, doguConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.DoguConfig) config.DoguConfig); ok {
		r0 = rf(ctx, doguConfig)
	} else {
		r0 = ret.Get(0).(config.DoguConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.DoguConfig) error); ok {
		r1 = rf(ctx, doguConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguConfigRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDoguConfigRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - doguConfig config.DoguConfig
func (_e *MockDoguConfigRepository_Expecter) Create(ctx interface{}, doguConfig interface{}) *MockDoguConfigRepository_Create_Call {
	return &MockDoguConfigRepository_Create_Call{Call: _e.mock.On("Create", ctx, doguConfig)}
}

func (_c *MockDoguConfigRepository_Create_Call) Run(run func(ctx context.Context, doguConfig config.DoguConfig)) *MockDoguConfigRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.DoguConfig))
	})
	return _c
}

func (_c *MockDoguConfigRepository_Create_Call) Return(_a0 config.DoguConfig, _a1 error) *MockDoguConfigRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguConfigRepository_Create_Call) RunAndReturn(run func(context.Context, config.DoguConfig) (config.DoguConfig, error)) *MockDoguConfigRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, name
func (_m *MockDoguConfigRepository) Delete(ctx context.Context, name dogu.SimpleName) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dogu.SimpleName) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguConfigRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDoguConfigRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name dogu.SimpleName
func (_e *MockDoguConfigRepository_Expecter) Delete(ctx interface{}, name interface{}) *MockDoguConfigRepository_Delete_Call {
	return &MockDoguConfigRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, name)}
}

func (_c *MockDoguConfigRepository_Delete_Call) Run(run func(ctx context.Context, name dogu.SimpleName)) *MockDoguConfigRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dogu.SimpleName))
	})
	return _c
}

func (_c *MockDoguConfigRepository_Delete_Call) Return(_a0 error) *MockDoguConfigRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguConfigRepository_Delete_Call) RunAndReturn(run func(context.Context, dogu.SimpleName) error) *MockDoguConfigRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, name
func (_m *MockDoguConfigRepository) Get(ctx context.Context, name dogu.SimpleName) (config.DoguConfig, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 config.DoguConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dogu.SimpleName) (config.DoguConfig, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dogu.SimpleName) config.DoguConfig); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(config.DoguConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dogu.SimpleName) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguConfigRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockDoguConfigRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name dogu.SimpleName
func (_e *MockDoguConfigRepository_Expecter) Get(ctx interface{}, name interface{}) *MockDoguConfigRepository_Get_Call {
	return &MockDoguConfigRepository_Get_Call{Call: _e.mock.On("Get", ctx, name)}
}

func (_c *MockDoguConfigRepository_Get_Call) Run(run func(ctx context.Context, name dogu.SimpleName)) *MockDoguConfigRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dogu.SimpleName))
	})
	return _c
}

func (_c *MockDoguConfigRepository_Get_Call) Return(_a0 config.DoguConfig, _a1 error) *MockDoguConfigRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguConfigRepository_Get_Call) RunAndReturn(run func(context.Context, dogu.SimpleName) (config.DoguConfig, error)) *MockDoguConfigRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// SaveOrMerge provides a mock function with given fields: ctx, doguConfig
func (_m *MockDoguConfigRepository) SaveOrMerge(ctx context.Context, doguConfig config.DoguConfig) (config.DoguConfig, error) {
	ret := _m.Called(ctx, doguConfig)

	if len(ret) == 0 {
		panic("no return value specified for SaveOrMerge")
	}

	var r0 config.DoguConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.DoguConfig) (config.DoguConfig, error)); ok {
		return rf(ctx, doguConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.DoguConfig) config.DoguConfig); ok {
		r0 = rf(ctx, doguConfig)
	} else {
		r0 = ret.Get(0).(config.DoguConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.DoguConfig) error); ok {
		r1 = rf(ctx, doguConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguConfigRepository_SaveOrMerge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveOrMerge'
type MockDoguConfigRepository_SaveOrMerge_Call struct {
	*mock.Call
}

// SaveOrMerge is a helper method to define mock.On call
//   - ctx context.Context
//   - doguConfig config.DoguConfig
func (_e *MockDoguConfigRepository_Expecter) SaveOrMerge(ctx interface{}, doguConfig interface{}) *MockDoguConfigRepository_SaveOrMerge_Call {
	return &MockDoguConfigRepository_SaveOrMerge_Call{Call: _e.mock.On("SaveOrMerge", ctx, doguConfig)}
}

func (_c *MockDoguConfigRepository_SaveOrMerge_Call) Run(run func(ctx context.Context, doguConfig config.DoguConfig)) *MockDoguConfigRepository_SaveOrMerge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.DoguConfig))
	})
	return _c
}

func (_c *MockDoguConfigRepository_SaveOrMerge_Call) Return(_a0 config.DoguConfig, _a1 error) *MockDoguConfigRepository_SaveOrMerge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguConfigRepository_SaveOrMerge_Call) RunAndReturn(run func(context.Context, config.DoguConfig) (config.DoguConfig, error)) *MockDoguConfigRepository_SaveOrMerge_Call {
	_c.Call.Return(run)
	return _c
}

// SetOwnerReference provides a mock function with given fields: ctx, dName, owners
func (_m *MockDoguConfigRepository) SetOwnerReference(ctx context.Context, dName dogu.SimpleName, owners []v1.OwnerReference) error {
	ret := _m.Called(ctx, dName, owners)

	if len(ret) == 0 {
		panic("no return value specified for SetOwnerReference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dogu.SimpleName, []v1.OwnerReference) error); ok {
		r0 = rf(ctx, dName, owners)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguConfigRepository_SetOwnerReference_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOwnerReference'
type MockDoguConfigRepository_SetOwnerReference_Call struct {
	*mock.Call
}

// SetOwnerReference is a helper method to define mock.On call
//   - ctx context.Context
//   - dName dogu.SimpleName
//   - owners []v1.OwnerReference
func (_e *MockDoguConfigRepository_Expecter) SetOwnerReference(ctx interface{}, dName interface{}, owners interface{}) *MockDoguConfigRepository_SetOwnerReference_Call {
	return &MockDoguConfigRepository_SetOwnerReference_Call{Call: _e.mock.On("SetOwnerReference", ctx, dName, owners)}
}

func (_c *MockDoguConfigRepository_SetOwnerReference_Call) Run(run func(ctx context.Context, dName dogu.SimpleName, owners []v1.OwnerReference)) *MockDoguConfigRepository_SetOwnerReference_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dogu.SimpleName), args[2].([]v1.OwnerReference))
	})
	return _c
}

func (_c *MockDoguConfigRepository_SetOwnerReference_Call) Return(_a0 error) *MockDoguConfigRepository_SetOwnerReference_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguConfigRepository_SetOwnerReference_Call) RunAndReturn(run func(context.Context, dogu.SimpleName, []v1.OwnerReference) error) *MockDoguConfigRepository_SetOwnerReference_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, doguConfig
func (_m *MockDoguConfigRepository) Update(ctx context.Context, doguConfig config.DoguConfig) (config.DoguConfig, error) {
	ret := _m.Called(ctx, doguConfig)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 config.DoguConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.DoguConfig) (config.DoguConfig, error)); ok {
		return rf(ctx, doguConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.DoguConfig) config.DoguConfig); ok {
		r0 = rf(ctx, doguConfig)
	} else {
		r0 = ret.Get(0).(config.DoguConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.DoguConfig) error); ok {
		r1 = rf(ctx, doguConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguConfigRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDoguConfigRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - doguConfig config.DoguConfig
func (_e *MockDoguConfigRepository_Expecter) Update(ctx interface{}, doguConfig interface{}) *MockDoguConfigRepository_Update_Call {
	return &MockDoguConfigRepository_Update_Call{Call: _e.mock.On("Update", ctx, doguConfig)}
}

func (_c *MockDoguConfigRepository_Update_Call) Run(run func(ctx context.Context, doguConfig config.DoguConfig)) *MockDoguConfigRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.DoguConfig))
	})
	return _c
}

func (_c *MockDoguConfigRepository_Update_Call) Return(_a0 config.DoguConfig, _a1 error) *MockDoguConfigRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguConfigRepository_Update_Call) RunAndReturn(run func(context.Context, config.DoguConfig) (config.DoguConfig, error)) *MockDoguConfigRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, dName, filters
func (_m *MockDoguConfigRepository) Watch(ctx context.Context, dName dogu.SimpleName, filters ...config.WatchFilter) (<-chan repository.DoguConfigWatchResult, error) {
	_va := make([]interface{}, len(filters))
	for _i := range filters {
		_va[_i] = filters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 <-chan repository.DoguConfigWatchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dogu.SimpleName, ...config.WatchFilter) (<-chan repository.DoguConfigWatchResult, error)); ok {
		return rf(ctx, dName, filters...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dogu.SimpleName, ...config.WatchFilter) <-chan repository.DoguConfigWatchResult); ok {
		r0 = rf(ctx, dName, filters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repository.DoguConfigWatchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dogu.SimpleName, ...config.WatchFilter) error); ok {
		r1 = rf(ctx, dName, filters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguConfigRepository_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockDoguConfigRepository_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - dName dogu.SimpleName
//   - filters ...config.WatchFilter
func (_e *MockDoguConfigRepository_Expecter) Watch(ctx interface{}, dName interface{}, filters ...interface{}) *MockDoguConfigRepository_Watch_Call {
	return &MockDoguConfigRepository_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{ctx, dName}, filters...)...)}
}

func (_c *MockDoguConfigRepository_Watch_Call) Run(run func(ctx context.Context, dName dogu.SimpleName, filters ...config.WatchFilter)) *MockDoguConfigRepository_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]config.WatchFilter, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(config.WatchFilter)
			}
		}
		run(args[0].(context.Context), args[1].(dogu.SimpleName), variadicArgs...)
	})
	return _c
}

func (_c *MockDoguConfigRepository_Watch_Call) Return(_a0 <-chan repository.DoguConfigWatchResult, _a1 error) *MockDoguConfigRepository_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguConfigRepository_Watch_Call) RunAndReturn(run func(context.Context, dogu.SimpleName, ...config.WatchFilter) (<-chan repository.DoguConfigWatchResult, error)) *MockDoguConfigRepository_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDoguConfigRepository creates a new instance of MockDoguConfigRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDoguConfigRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDoguConfigRepository {
	mock := &MockDoguConfigRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

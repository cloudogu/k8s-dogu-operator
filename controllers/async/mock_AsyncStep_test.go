// Code generated by mockery v2.53.2. DO NOT EDIT.

package async

import (
	context "context"

	v2 "github.com/cloudogu/k8s-dogu-operator/v3/api/v2"
	mock "github.com/stretchr/testify/mock"
)

// MockAsyncStep is an autogenerated mock type for the AsyncStep type
type MockAsyncStep struct {
	mock.Mock
}

type MockAsyncStep_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAsyncStep) EXPECT() *MockAsyncStep_Expecter {
	return &MockAsyncStep_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, dogu
func (_m *MockAsyncStep) Execute(ctx context.Context, dogu *v2.Dogu) (string, error) {
	ret := _m.Called(ctx, dogu)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu) (string, error)); ok {
		return rf(ctx, dogu)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu) string); ok {
		r0 = rf(ctx, dogu)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.Dogu) error); ok {
		r1 = rf(ctx, dogu)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAsyncStep_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockAsyncStep_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - dogu *v2.Dogu
func (_e *MockAsyncStep_Expecter) Execute(ctx interface{}, dogu interface{}) *MockAsyncStep_Execute_Call {
	return &MockAsyncStep_Execute_Call{Call: _e.mock.On("Execute", ctx, dogu)}
}

func (_c *MockAsyncStep_Execute_Call) Run(run func(ctx context.Context, dogu *v2.Dogu)) *MockAsyncStep_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu))
	})
	return _c
}

func (_c *MockAsyncStep_Execute_Call) Return(_a0 string, _a1 error) *MockAsyncStep_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAsyncStep_Execute_Call) RunAndReturn(run func(context.Context, *v2.Dogu) (string, error)) *MockAsyncStep_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetStartCondition provides a mock function with no fields
func (_m *MockAsyncStep) GetStartCondition() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStartCondition")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockAsyncStep_GetStartCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStartCondition'
type MockAsyncStep_GetStartCondition_Call struct {
	*mock.Call
}

// GetStartCondition is a helper method to define mock.On call
func (_e *MockAsyncStep_Expecter) GetStartCondition() *MockAsyncStep_GetStartCondition_Call {
	return &MockAsyncStep_GetStartCondition_Call{Call: _e.mock.On("GetStartCondition")}
}

func (_c *MockAsyncStep_GetStartCondition_Call) Run(run func()) *MockAsyncStep_GetStartCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAsyncStep_GetStartCondition_Call) Return(_a0 string) *MockAsyncStep_GetStartCondition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAsyncStep_GetStartCondition_Call) RunAndReturn(run func() string) *MockAsyncStep_GetStartCondition_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAsyncStep creates a new instance of MockAsyncStep. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAsyncStep(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAsyncStep {
	mock := &MockAsyncStep{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

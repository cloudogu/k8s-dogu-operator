// Code generated by mockery v2.53.5. DO NOT EDIT.

package controllers

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"

	time "time"

	v2 "github.com/cloudogu/k8s-dogu-lib/v2/api/v2"
)

// MockRequeueHandler is an autogenerated mock type for the RequeueHandler type
type MockRequeueHandler struct {
	mock.Mock
}

type MockRequeueHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequeueHandler) EXPECT() *MockRequeueHandler_Expecter {
	return &MockRequeueHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: ctx, doguResource, err, reqTime
func (_m *MockRequeueHandler) Handle(ctx context.Context, doguResource *v2.Dogu, err error, reqTime time.Duration) (reconcile.Result, error) {
	ret := _m.Called(ctx, doguResource, err, reqTime)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 reconcile.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu, error, time.Duration) (reconcile.Result, error)); ok {
		return rf(ctx, doguResource, err, reqTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu, error, time.Duration) reconcile.Result); ok {
		r0 = rf(ctx, doguResource, err, reqTime)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2.Dogu, error, time.Duration) error); ok {
		r1 = rf(ctx, doguResource, err, reqTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRequeueHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockRequeueHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
//   - err error
//   - reqTime time.Duration
func (_e *MockRequeueHandler_Expecter) Handle(ctx interface{}, doguResource interface{}, err interface{}, reqTime interface{}) *MockRequeueHandler_Handle_Call {
	return &MockRequeueHandler_Handle_Call{Call: _e.mock.On("Handle", ctx, doguResource, err, reqTime)}
}

func (_c *MockRequeueHandler_Handle_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu, err error, reqTime time.Duration)) *MockRequeueHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu), args[2].(error), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockRequeueHandler_Handle_Call) Return(result reconcile.Result, requeueErr error) *MockRequeueHandler_Handle_Call {
	_c.Call.Return(result, requeueErr)
	return _c
}

func (_c *MockRequeueHandler_Handle_Call) RunAndReturn(run func(context.Context, *v2.Dogu, error, time.Duration) (reconcile.Result, error)) *MockRequeueHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequeueHandler creates a new instance of MockRequeueHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequeueHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequeueHandler {
	mock := &MockRequeueHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

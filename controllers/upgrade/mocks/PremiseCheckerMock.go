// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks

import (
	context "context"
	v1 "github.com/cloudogu/k8s-dogu-operator/api/v1"

	core "github.com/cloudogu/cesapp-lib/core"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// PremiseCheckerMock is an autogenerated mock type for the PremiseCheckerMock type
type PremiseCheckerMock struct {
	mock.Mock
}

// ValidateDependencies provides a mock function with given fields: ctx, dogu
func (_m *PremiseCheckerMock) ValidateDependencies(ctx context.Context, dogu *core.Dogu) error {
	ret := _m.Called(ctx, dogu)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.Dogu) error); ok {
		r0 = rf(ctx, dogu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckWithResource provides a mock function with given fields: ctx, doguResource
func (_m *PremiseCheckerMock) CheckWithResource(ctx context.Context, doguResource *v1.Dogu) error {
	ret := _m.Called(ctx, doguResource)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Dogu) error); ok {
		r0 = rf(ctx, doguResource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckDependenciesRecursive provides a mock function with given fields: ctx, fromDogu, currentK8sNamespace
func (_m *PremiseCheckerMock) CheckDependenciesRecursive(ctx context.Context, fromDogu *core.Dogu, currentK8sNamespace string) error {
	ret := _m.Called(ctx, fromDogu, currentK8sNamespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *core.Dogu, string) error); ok {
		r0 = rf(ctx, fromDogu, currentK8sNamespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPremiseCheckerMock creates a new instance of PremiseCheckerMock. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPremiseCheckerMock(t testing.TB) *PremiseCheckerMock {
	mock := &PremiseCheckerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.46.2. DO NOT EDIT.

package controllers

import (
	context "context"

	v2 "github.com/cloudogu/k8s-dogu-operator/v2/api/v2"
	mock "github.com/stretchr/testify/mock"
)

// MockStartDoguManager is an autogenerated mock type for the StartDoguManager type
type MockStartDoguManager struct {
	mock.Mock
}

type MockStartDoguManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStartDoguManager) EXPECT() *MockStartDoguManager_Expecter {
	return &MockStartDoguManager_Expecter{mock: &_m.Mock}
}

// CheckStarted provides a mock function with given fields: ctx, doguResource
func (_m *MockStartDoguManager) CheckStarted(ctx context.Context, doguResource *v2.Dogu) error {
	ret := _m.Called(ctx, doguResource)

	if len(ret) == 0 {
		panic("no return value specified for CheckStarted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu) error); ok {
		r0 = rf(ctx, doguResource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStartDoguManager_CheckStarted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckStarted'
type MockStartDoguManager_CheckStarted_Call struct {
	*mock.Call
}

// CheckStarted is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
func (_e *MockStartDoguManager_Expecter) CheckStarted(ctx interface{}, doguResource interface{}) *MockStartDoguManager_CheckStarted_Call {
	return &MockStartDoguManager_CheckStarted_Call{Call: _e.mock.On("CheckStarted", ctx, doguResource)}
}

func (_c *MockStartDoguManager_CheckStarted_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu)) *MockStartDoguManager_CheckStarted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu))
	})
	return _c
}

func (_c *MockStartDoguManager_CheckStarted_Call) Return(_a0 error) *MockStartDoguManager_CheckStarted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStartDoguManager_CheckStarted_Call) RunAndReturn(run func(context.Context, *v2.Dogu) error) *MockStartDoguManager_CheckStarted_Call {
	_c.Call.Return(run)
	return _c
}

// StartDogu provides a mock function with given fields: ctx, doguResource
func (_m *MockStartDoguManager) StartDogu(ctx context.Context, doguResource *v2.Dogu) error {
	ret := _m.Called(ctx, doguResource)

	if len(ret) == 0 {
		panic("no return value specified for StartDogu")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu) error); ok {
		r0 = rf(ctx, doguResource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStartDoguManager_StartDogu_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartDogu'
type MockStartDoguManager_StartDogu_Call struct {
	*mock.Call
}

// StartDogu is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
func (_e *MockStartDoguManager_Expecter) StartDogu(ctx interface{}, doguResource interface{}) *MockStartDoguManager_StartDogu_Call {
	return &MockStartDoguManager_StartDogu_Call{Call: _e.mock.On("StartDogu", ctx, doguResource)}
}

func (_c *MockStartDoguManager_StartDogu_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu)) *MockStartDoguManager_StartDogu_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu))
	})
	return _c
}

func (_c *MockStartDoguManager_StartDogu_Call) Return(_a0 error) *MockStartDoguManager_StartDogu_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStartDoguManager_StartDogu_Call) RunAndReturn(run func(context.Context, *v2.Dogu) error) *MockStartDoguManager_StartDogu_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStartDoguManager creates a new instance of MockStartDoguManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStartDoguManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStartDoguManager {
	mock := &MockStartDoguManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

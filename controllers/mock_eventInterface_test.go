// Code generated by mockery v2.53.5. DO NOT EDIT.

package controllers

import (
	context "context"

	corev1 "k8s.io/api/core/v1"

	fields "k8s.io/apimachinery/pkg/fields"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	mock "github.com/stretchr/testify/mock"

	runtime "k8s.io/apimachinery/pkg/runtime"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/client-go/applyconfigurations/core/v1"

	watch "k8s.io/apimachinery/pkg/watch"
)

// mockEventInterface is an autogenerated mock type for the eventInterface type
type mockEventInterface struct {
	mock.Mock
}

type mockEventInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *mockEventInterface) EXPECT() *mockEventInterface_Expecter {
	return &mockEventInterface_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: ctx, event, opts
func (_m *mockEventInterface) Apply(ctx context.Context, event *v1.EventApplyConfiguration, opts metav1.ApplyOptions) (*corev1.Event, error) {
	ret := _m.Called(ctx, event, opts)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 *corev1.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.EventApplyConfiguration, metav1.ApplyOptions) (*corev1.Event, error)); ok {
		return rf(ctx, event, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.EventApplyConfiguration, metav1.ApplyOptions) *corev1.Event); ok {
		r0 = rf(ctx, event, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.EventApplyConfiguration, metav1.ApplyOptions) error); ok {
		r1 = rf(ctx, event, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEventInterface_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type mockEventInterface_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - ctx context.Context
//   - event *v1.EventApplyConfiguration
//   - opts metav1.ApplyOptions
func (_e *mockEventInterface_Expecter) Apply(ctx interface{}, event interface{}, opts interface{}) *mockEventInterface_Apply_Call {
	return &mockEventInterface_Apply_Call{Call: _e.mock.On("Apply", ctx, event, opts)}
}

func (_c *mockEventInterface_Apply_Call) Run(run func(ctx context.Context, event *v1.EventApplyConfiguration, opts metav1.ApplyOptions)) *mockEventInterface_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.EventApplyConfiguration), args[2].(metav1.ApplyOptions))
	})
	return _c
}

func (_c *mockEventInterface_Apply_Call) Return(result *corev1.Event, err error) *mockEventInterface_Apply_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *mockEventInterface_Apply_Call) RunAndReturn(run func(context.Context, *v1.EventApplyConfiguration, metav1.ApplyOptions) (*corev1.Event, error)) *mockEventInterface_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, event, opts
func (_m *mockEventInterface) Create(ctx context.Context, event *corev1.Event, opts metav1.CreateOptions) (*corev1.Event, error) {
	ret := _m.Called(ctx, event, opts)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *corev1.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Event, metav1.CreateOptions) (*corev1.Event, error)); ok {
		return rf(ctx, event, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Event, metav1.CreateOptions) *corev1.Event); ok {
		r0 = rf(ctx, event, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1.Event, metav1.CreateOptions) error); ok {
		r1 = rf(ctx, event, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEventInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockEventInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - event *corev1.Event
//   - opts metav1.CreateOptions
func (_e *mockEventInterface_Expecter) Create(ctx interface{}, event interface{}, opts interface{}) *mockEventInterface_Create_Call {
	return &mockEventInterface_Create_Call{Call: _e.mock.On("Create", ctx, event, opts)}
}

func (_c *mockEventInterface_Create_Call) Run(run func(ctx context.Context, event *corev1.Event, opts metav1.CreateOptions)) *mockEventInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*corev1.Event), args[2].(metav1.CreateOptions))
	})
	return _c
}

func (_c *mockEventInterface_Create_Call) Return(_a0 *corev1.Event, _a1 error) *mockEventInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEventInterface_Create_Call) RunAndReturn(run func(context.Context, *corev1.Event, metav1.CreateOptions) (*corev1.Event, error)) *mockEventInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWithEventNamespace provides a mock function with given fields: event
func (_m *mockEventInterface) CreateWithEventNamespace(event *corev1.Event) (*corev1.Event, error) {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for CreateWithEventNamespace")
	}

	var r0 *corev1.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(*corev1.Event) (*corev1.Event, error)); ok {
		return rf(event)
	}
	if rf, ok := ret.Get(0).(func(*corev1.Event) *corev1.Event); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(*corev1.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEventInterface_CreateWithEventNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWithEventNamespace'
type mockEventInterface_CreateWithEventNamespace_Call struct {
	*mock.Call
}

// CreateWithEventNamespace is a helper method to define mock.On call
//   - event *corev1.Event
func (_e *mockEventInterface_Expecter) CreateWithEventNamespace(event interface{}) *mockEventInterface_CreateWithEventNamespace_Call {
	return &mockEventInterface_CreateWithEventNamespace_Call{Call: _e.mock.On("CreateWithEventNamespace", event)}
}

func (_c *mockEventInterface_CreateWithEventNamespace_Call) Run(run func(event *corev1.Event)) *mockEventInterface_CreateWithEventNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*corev1.Event))
	})
	return _c
}

func (_c *mockEventInterface_CreateWithEventNamespace_Call) Return(_a0 *corev1.Event, _a1 error) *mockEventInterface_CreateWithEventNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEventInterface_CreateWithEventNamespace_Call) RunAndReturn(run func(*corev1.Event) (*corev1.Event, error)) *mockEventInterface_CreateWithEventNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// CreateWithEventNamespaceWithContext provides a mock function with given fields: ctx, event
func (_m *mockEventInterface) CreateWithEventNamespaceWithContext(ctx context.Context, event *corev1.Event) (*corev1.Event, error) {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for CreateWithEventNamespaceWithContext")
	}

	var r0 *corev1.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Event) (*corev1.Event, error)); ok {
		return rf(ctx, event)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Event) *corev1.Event); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEventInterface_CreateWithEventNamespaceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWithEventNamespaceWithContext'
type mockEventInterface_CreateWithEventNamespaceWithContext_Call struct {
	*mock.Call
}

// CreateWithEventNamespaceWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - event *corev1.Event
func (_e *mockEventInterface_Expecter) CreateWithEventNamespaceWithContext(ctx interface{}, event interface{}) *mockEventInterface_CreateWithEventNamespaceWithContext_Call {
	return &mockEventInterface_CreateWithEventNamespaceWithContext_Call{Call: _e.mock.On("CreateWithEventNamespaceWithContext", ctx, event)}
}

func (_c *mockEventInterface_CreateWithEventNamespaceWithContext_Call) Run(run func(ctx context.Context, event *corev1.Event)) *mockEventInterface_CreateWithEventNamespaceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*corev1.Event))
	})
	return _c
}

func (_c *mockEventInterface_CreateWithEventNamespaceWithContext_Call) Return(_a0 *corev1.Event, _a1 error) *mockEventInterface_CreateWithEventNamespaceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEventInterface_CreateWithEventNamespaceWithContext_Call) RunAndReturn(run func(context.Context, *corev1.Event) (*corev1.Event, error)) *mockEventInterface_CreateWithEventNamespaceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, name, opts
func (_m *mockEventInterface) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ret := _m.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.DeleteOptions) error); ok {
		r0 = rf(ctx, name, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockEventInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockEventInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts metav1.DeleteOptions
func (_e *mockEventInterface_Expecter) Delete(ctx interface{}, name interface{}, opts interface{}) *mockEventInterface_Delete_Call {
	return &mockEventInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, name, opts)}
}

func (_c *mockEventInterface_Delete_Call) Run(run func(ctx context.Context, name string, opts metav1.DeleteOptions)) *mockEventInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(metav1.DeleteOptions))
	})
	return _c
}

func (_c *mockEventInterface_Delete_Call) Return(_a0 error) *mockEventInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEventInterface_Delete_Call) RunAndReturn(run func(context.Context, string, metav1.DeleteOptions) error) *mockEventInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCollection provides a mock function with given fields: ctx, opts, listOpts
func (_m *mockEventInterface) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	ret := _m.Called(ctx, opts, listOpts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, metav1.DeleteOptions, metav1.ListOptions) error); ok {
		r0 = rf(ctx, opts, listOpts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockEventInterface_DeleteCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollection'
type mockEventInterface_DeleteCollection_Call struct {
	*mock.Call
}

// DeleteCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - opts metav1.DeleteOptions
//   - listOpts metav1.ListOptions
func (_e *mockEventInterface_Expecter) DeleteCollection(ctx interface{}, opts interface{}, listOpts interface{}) *mockEventInterface_DeleteCollection_Call {
	return &mockEventInterface_DeleteCollection_Call{Call: _e.mock.On("DeleteCollection", ctx, opts, listOpts)}
}

func (_c *mockEventInterface_DeleteCollection_Call) Run(run func(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions)) *mockEventInterface_DeleteCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metav1.DeleteOptions), args[2].(metav1.ListOptions))
	})
	return _c
}

func (_c *mockEventInterface_DeleteCollection_Call) Return(_a0 error) *mockEventInterface_DeleteCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEventInterface_DeleteCollection_Call) RunAndReturn(run func(context.Context, metav1.DeleteOptions, metav1.ListOptions) error) *mockEventInterface_DeleteCollection_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, name, opts
func (_m *mockEventInterface) Get(ctx context.Context, name string, opts metav1.GetOptions) (*corev1.Event, error) {
	ret := _m.Called(ctx, name, opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *corev1.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.GetOptions) (*corev1.Event, error)); ok {
		return rf(ctx, name, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.GetOptions) *corev1.Event); ok {
		r0 = rf(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, metav1.GetOptions) error); ok {
		r1 = rf(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEventInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockEventInterface_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - opts metav1.GetOptions
func (_e *mockEventInterface_Expecter) Get(ctx interface{}, name interface{}, opts interface{}) *mockEventInterface_Get_Call {
	return &mockEventInterface_Get_Call{Call: _e.mock.On("Get", ctx, name, opts)}
}

func (_c *mockEventInterface_Get_Call) Run(run func(ctx context.Context, name string, opts metav1.GetOptions)) *mockEventInterface_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(metav1.GetOptions))
	})
	return _c
}

func (_c *mockEventInterface_Get_Call) Return(_a0 *corev1.Event, _a1 error) *mockEventInterface_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEventInterface_Get_Call) RunAndReturn(run func(context.Context, string, metav1.GetOptions) (*corev1.Event, error)) *mockEventInterface_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetFieldSelector provides a mock function with given fields: involvedObjectName, involvedObjectNamespace, involvedObjectKind, involvedObjectUID
func (_m *mockEventInterface) GetFieldSelector(involvedObjectName *string, involvedObjectNamespace *string, involvedObjectKind *string, involvedObjectUID *string) fields.Selector {
	ret := _m.Called(involvedObjectName, involvedObjectNamespace, involvedObjectKind, involvedObjectUID)

	if len(ret) == 0 {
		panic("no return value specified for GetFieldSelector")
	}

	var r0 fields.Selector
	if rf, ok := ret.Get(0).(func(*string, *string, *string, *string) fields.Selector); ok {
		r0 = rf(involvedObjectName, involvedObjectNamespace, involvedObjectKind, involvedObjectUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fields.Selector)
		}
	}

	return r0
}

// mockEventInterface_GetFieldSelector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFieldSelector'
type mockEventInterface_GetFieldSelector_Call struct {
	*mock.Call
}

// GetFieldSelector is a helper method to define mock.On call
//   - involvedObjectName *string
//   - involvedObjectNamespace *string
//   - involvedObjectKind *string
//   - involvedObjectUID *string
func (_e *mockEventInterface_Expecter) GetFieldSelector(involvedObjectName interface{}, involvedObjectNamespace interface{}, involvedObjectKind interface{}, involvedObjectUID interface{}) *mockEventInterface_GetFieldSelector_Call {
	return &mockEventInterface_GetFieldSelector_Call{Call: _e.mock.On("GetFieldSelector", involvedObjectName, involvedObjectNamespace, involvedObjectKind, involvedObjectUID)}
}

func (_c *mockEventInterface_GetFieldSelector_Call) Run(run func(involvedObjectName *string, involvedObjectNamespace *string, involvedObjectKind *string, involvedObjectUID *string)) *mockEventInterface_GetFieldSelector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(*string), args[2].(*string), args[3].(*string))
	})
	return _c
}

func (_c *mockEventInterface_GetFieldSelector_Call) Return(_a0 fields.Selector) *mockEventInterface_GetFieldSelector_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEventInterface_GetFieldSelector_Call) RunAndReturn(run func(*string, *string, *string, *string) fields.Selector) *mockEventInterface_GetFieldSelector_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, opts
func (_m *mockEventInterface) List(ctx context.Context, opts metav1.ListOptions) (*corev1.EventList, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *corev1.EventList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) (*corev1.EventList, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) *corev1.EventList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.EventList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, metav1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEventInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type mockEventInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - opts metav1.ListOptions
func (_e *mockEventInterface_Expecter) List(ctx interface{}, opts interface{}) *mockEventInterface_List_Call {
	return &mockEventInterface_List_Call{Call: _e.mock.On("List", ctx, opts)}
}

func (_c *mockEventInterface_List_Call) Run(run func(ctx context.Context, opts metav1.ListOptions)) *mockEventInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metav1.ListOptions))
	})
	return _c
}

func (_c *mockEventInterface_List_Call) Return(_a0 *corev1.EventList, _a1 error) *mockEventInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEventInterface_List_Call) RunAndReturn(run func(context.Context, metav1.ListOptions) (*corev1.EventList, error)) *mockEventInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// Patch provides a mock function with given fields: ctx, name, pt, data, opts, subresources
func (_m *mockEventInterface) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (*corev1.Event, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, pt, data, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *corev1.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) (*corev1.Event, error)); ok {
		return rf(ctx, name, pt, data, opts, subresources...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) *corev1.Event); ok {
		r0 = rf(ctx, name, pt, data, opts, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) error); ok {
		r1 = rf(ctx, name, pt, data, opts, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEventInterface_Patch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Patch'
type mockEventInterface_Patch_Call struct {
	*mock.Call
}

// Patch is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - pt types.PatchType
//   - data []byte
//   - opts metav1.PatchOptions
//   - subresources ...string
func (_e *mockEventInterface_Expecter) Patch(ctx interface{}, name interface{}, pt interface{}, data interface{}, opts interface{}, subresources ...interface{}) *mockEventInterface_Patch_Call {
	return &mockEventInterface_Patch_Call{Call: _e.mock.On("Patch",
		append([]interface{}{ctx, name, pt, data, opts}, subresources...)...)}
}

func (_c *mockEventInterface_Patch_Call) Run(run func(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string)) *mockEventInterface_Patch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(types.PatchType), args[3].([]byte), args[4].(metav1.PatchOptions), variadicArgs...)
	})
	return _c
}

func (_c *mockEventInterface_Patch_Call) Return(result *corev1.Event, err error) *mockEventInterface_Patch_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *mockEventInterface_Patch_Call) RunAndReturn(run func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) (*corev1.Event, error)) *mockEventInterface_Patch_Call {
	_c.Call.Return(run)
	return _c
}

// PatchWithEventNamespace provides a mock function with given fields: event, data
func (_m *mockEventInterface) PatchWithEventNamespace(event *corev1.Event, data []byte) (*corev1.Event, error) {
	ret := _m.Called(event, data)

	if len(ret) == 0 {
		panic("no return value specified for PatchWithEventNamespace")
	}

	var r0 *corev1.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(*corev1.Event, []byte) (*corev1.Event, error)); ok {
		return rf(event, data)
	}
	if rf, ok := ret.Get(0).(func(*corev1.Event, []byte) *corev1.Event); ok {
		r0 = rf(event, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(*corev1.Event, []byte) error); ok {
		r1 = rf(event, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEventInterface_PatchWithEventNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchWithEventNamespace'
type mockEventInterface_PatchWithEventNamespace_Call struct {
	*mock.Call
}

// PatchWithEventNamespace is a helper method to define mock.On call
//   - event *corev1.Event
//   - data []byte
func (_e *mockEventInterface_Expecter) PatchWithEventNamespace(event interface{}, data interface{}) *mockEventInterface_PatchWithEventNamespace_Call {
	return &mockEventInterface_PatchWithEventNamespace_Call{Call: _e.mock.On("PatchWithEventNamespace", event, data)}
}

func (_c *mockEventInterface_PatchWithEventNamespace_Call) Run(run func(event *corev1.Event, data []byte)) *mockEventInterface_PatchWithEventNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*corev1.Event), args[1].([]byte))
	})
	return _c
}

func (_c *mockEventInterface_PatchWithEventNamespace_Call) Return(_a0 *corev1.Event, _a1 error) *mockEventInterface_PatchWithEventNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEventInterface_PatchWithEventNamespace_Call) RunAndReturn(run func(*corev1.Event, []byte) (*corev1.Event, error)) *mockEventInterface_PatchWithEventNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// PatchWithEventNamespaceWithContext provides a mock function with given fields: ctx, event, data
func (_m *mockEventInterface) PatchWithEventNamespaceWithContext(ctx context.Context, event *corev1.Event, data []byte) (*corev1.Event, error) {
	ret := _m.Called(ctx, event, data)

	if len(ret) == 0 {
		panic("no return value specified for PatchWithEventNamespaceWithContext")
	}

	var r0 *corev1.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Event, []byte) (*corev1.Event, error)); ok {
		return rf(ctx, event, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Event, []byte) *corev1.Event); ok {
		r0 = rf(ctx, event, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1.Event, []byte) error); ok {
		r1 = rf(ctx, event, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEventInterface_PatchWithEventNamespaceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchWithEventNamespaceWithContext'
type mockEventInterface_PatchWithEventNamespaceWithContext_Call struct {
	*mock.Call
}

// PatchWithEventNamespaceWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - event *corev1.Event
//   - data []byte
func (_e *mockEventInterface_Expecter) PatchWithEventNamespaceWithContext(ctx interface{}, event interface{}, data interface{}) *mockEventInterface_PatchWithEventNamespaceWithContext_Call {
	return &mockEventInterface_PatchWithEventNamespaceWithContext_Call{Call: _e.mock.On("PatchWithEventNamespaceWithContext", ctx, event, data)}
}

func (_c *mockEventInterface_PatchWithEventNamespaceWithContext_Call) Run(run func(ctx context.Context, event *corev1.Event, data []byte)) *mockEventInterface_PatchWithEventNamespaceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*corev1.Event), args[2].([]byte))
	})
	return _c
}

func (_c *mockEventInterface_PatchWithEventNamespaceWithContext_Call) Return(_a0 *corev1.Event, _a1 error) *mockEventInterface_PatchWithEventNamespaceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEventInterface_PatchWithEventNamespaceWithContext_Call) RunAndReturn(run func(context.Context, *corev1.Event, []byte) (*corev1.Event, error)) *mockEventInterface_PatchWithEventNamespaceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: scheme, objOrRef
func (_m *mockEventInterface) Search(scheme *runtime.Scheme, objOrRef runtime.Object) (*corev1.EventList, error) {
	ret := _m.Called(scheme, objOrRef)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 *corev1.EventList
	var r1 error
	if rf, ok := ret.Get(0).(func(*runtime.Scheme, runtime.Object) (*corev1.EventList, error)); ok {
		return rf(scheme, objOrRef)
	}
	if rf, ok := ret.Get(0).(func(*runtime.Scheme, runtime.Object) *corev1.EventList); ok {
		r0 = rf(scheme, objOrRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.EventList)
		}
	}

	if rf, ok := ret.Get(1).(func(*runtime.Scheme, runtime.Object) error); ok {
		r1 = rf(scheme, objOrRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEventInterface_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type mockEventInterface_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - scheme *runtime.Scheme
//   - objOrRef runtime.Object
func (_e *mockEventInterface_Expecter) Search(scheme interface{}, objOrRef interface{}) *mockEventInterface_Search_Call {
	return &mockEventInterface_Search_Call{Call: _e.mock.On("Search", scheme, objOrRef)}
}

func (_c *mockEventInterface_Search_Call) Run(run func(scheme *runtime.Scheme, objOrRef runtime.Object)) *mockEventInterface_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*runtime.Scheme), args[1].(runtime.Object))
	})
	return _c
}

func (_c *mockEventInterface_Search_Call) Return(_a0 *corev1.EventList, _a1 error) *mockEventInterface_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEventInterface_Search_Call) RunAndReturn(run func(*runtime.Scheme, runtime.Object) (*corev1.EventList, error)) *mockEventInterface_Search_Call {
	_c.Call.Return(run)
	return _c
}

// SearchWithContext provides a mock function with given fields: ctx, scheme, objOrRef
func (_m *mockEventInterface) SearchWithContext(ctx context.Context, scheme *runtime.Scheme, objOrRef runtime.Object) (*corev1.EventList, error) {
	ret := _m.Called(ctx, scheme, objOrRef)

	if len(ret) == 0 {
		panic("no return value specified for SearchWithContext")
	}

	var r0 *corev1.EventList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *runtime.Scheme, runtime.Object) (*corev1.EventList, error)); ok {
		return rf(ctx, scheme, objOrRef)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *runtime.Scheme, runtime.Object) *corev1.EventList); ok {
		r0 = rf(ctx, scheme, objOrRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.EventList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *runtime.Scheme, runtime.Object) error); ok {
		r1 = rf(ctx, scheme, objOrRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEventInterface_SearchWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchWithContext'
type mockEventInterface_SearchWithContext_Call struct {
	*mock.Call
}

// SearchWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - scheme *runtime.Scheme
//   - objOrRef runtime.Object
func (_e *mockEventInterface_Expecter) SearchWithContext(ctx interface{}, scheme interface{}, objOrRef interface{}) *mockEventInterface_SearchWithContext_Call {
	return &mockEventInterface_SearchWithContext_Call{Call: _e.mock.On("SearchWithContext", ctx, scheme, objOrRef)}
}

func (_c *mockEventInterface_SearchWithContext_Call) Run(run func(ctx context.Context, scheme *runtime.Scheme, objOrRef runtime.Object)) *mockEventInterface_SearchWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*runtime.Scheme), args[2].(runtime.Object))
	})
	return _c
}

func (_c *mockEventInterface_SearchWithContext_Call) Return(_a0 *corev1.EventList, _a1 error) *mockEventInterface_SearchWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEventInterface_SearchWithContext_Call) RunAndReturn(run func(context.Context, *runtime.Scheme, runtime.Object) (*corev1.EventList, error)) *mockEventInterface_SearchWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, event, opts
func (_m *mockEventInterface) Update(ctx context.Context, event *corev1.Event, opts metav1.UpdateOptions) (*corev1.Event, error) {
	ret := _m.Called(ctx, event, opts)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *corev1.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Event, metav1.UpdateOptions) (*corev1.Event, error)); ok {
		return rf(ctx, event, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Event, metav1.UpdateOptions) *corev1.Event); ok {
		r0 = rf(ctx, event, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1.Event, metav1.UpdateOptions) error); ok {
		r1 = rf(ctx, event, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEventInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type mockEventInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - event *corev1.Event
//   - opts metav1.UpdateOptions
func (_e *mockEventInterface_Expecter) Update(ctx interface{}, event interface{}, opts interface{}) *mockEventInterface_Update_Call {
	return &mockEventInterface_Update_Call{Call: _e.mock.On("Update", ctx, event, opts)}
}

func (_c *mockEventInterface_Update_Call) Run(run func(ctx context.Context, event *corev1.Event, opts metav1.UpdateOptions)) *mockEventInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*corev1.Event), args[2].(metav1.UpdateOptions))
	})
	return _c
}

func (_c *mockEventInterface_Update_Call) Return(_a0 *corev1.Event, _a1 error) *mockEventInterface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEventInterface_Update_Call) RunAndReturn(run func(context.Context, *corev1.Event, metav1.UpdateOptions) (*corev1.Event, error)) *mockEventInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWithEventNamespace provides a mock function with given fields: event
func (_m *mockEventInterface) UpdateWithEventNamespace(event *corev1.Event) (*corev1.Event, error) {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWithEventNamespace")
	}

	var r0 *corev1.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(*corev1.Event) (*corev1.Event, error)); ok {
		return rf(event)
	}
	if rf, ok := ret.Get(0).(func(*corev1.Event) *corev1.Event); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(*corev1.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEventInterface_UpdateWithEventNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWithEventNamespace'
type mockEventInterface_UpdateWithEventNamespace_Call struct {
	*mock.Call
}

// UpdateWithEventNamespace is a helper method to define mock.On call
//   - event *corev1.Event
func (_e *mockEventInterface_Expecter) UpdateWithEventNamespace(event interface{}) *mockEventInterface_UpdateWithEventNamespace_Call {
	return &mockEventInterface_UpdateWithEventNamespace_Call{Call: _e.mock.On("UpdateWithEventNamespace", event)}
}

func (_c *mockEventInterface_UpdateWithEventNamespace_Call) Run(run func(event *corev1.Event)) *mockEventInterface_UpdateWithEventNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*corev1.Event))
	})
	return _c
}

func (_c *mockEventInterface_UpdateWithEventNamespace_Call) Return(_a0 *corev1.Event, _a1 error) *mockEventInterface_UpdateWithEventNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEventInterface_UpdateWithEventNamespace_Call) RunAndReturn(run func(*corev1.Event) (*corev1.Event, error)) *mockEventInterface_UpdateWithEventNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWithEventNamespaceWithContext provides a mock function with given fields: ctx, event
func (_m *mockEventInterface) UpdateWithEventNamespaceWithContext(ctx context.Context, event *corev1.Event) (*corev1.Event, error) {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWithEventNamespaceWithContext")
	}

	var r0 *corev1.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Event) (*corev1.Event, error)); ok {
		return rf(ctx, event)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Event) *corev1.Event); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *corev1.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEventInterface_UpdateWithEventNamespaceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWithEventNamespaceWithContext'
type mockEventInterface_UpdateWithEventNamespaceWithContext_Call struct {
	*mock.Call
}

// UpdateWithEventNamespaceWithContext is a helper method to define mock.On call
//   - ctx context.Context
//   - event *corev1.Event
func (_e *mockEventInterface_Expecter) UpdateWithEventNamespaceWithContext(ctx interface{}, event interface{}) *mockEventInterface_UpdateWithEventNamespaceWithContext_Call {
	return &mockEventInterface_UpdateWithEventNamespaceWithContext_Call{Call: _e.mock.On("UpdateWithEventNamespaceWithContext", ctx, event)}
}

func (_c *mockEventInterface_UpdateWithEventNamespaceWithContext_Call) Run(run func(ctx context.Context, event *corev1.Event)) *mockEventInterface_UpdateWithEventNamespaceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*corev1.Event))
	})
	return _c
}

func (_c *mockEventInterface_UpdateWithEventNamespaceWithContext_Call) Return(_a0 *corev1.Event, _a1 error) *mockEventInterface_UpdateWithEventNamespaceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEventInterface_UpdateWithEventNamespaceWithContext_Call) RunAndReturn(run func(context.Context, *corev1.Event) (*corev1.Event, error)) *mockEventInterface_UpdateWithEventNamespaceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, opts
func (_m *mockEventInterface) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 watch.Interface
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) (watch.Interface, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) watch.Interface); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, metav1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockEventInterface_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type mockEventInterface_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts metav1.ListOptions
func (_e *mockEventInterface_Expecter) Watch(ctx interface{}, opts interface{}) *mockEventInterface_Watch_Call {
	return &mockEventInterface_Watch_Call{Call: _e.mock.On("Watch", ctx, opts)}
}

func (_c *mockEventInterface_Watch_Call) Run(run func(ctx context.Context, opts metav1.ListOptions)) *mockEventInterface_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(metav1.ListOptions))
	})
	return _c
}

func (_c *mockEventInterface_Watch_Call) Return(_a0 watch.Interface, _a1 error) *mockEventInterface_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockEventInterface_Watch_Call) RunAndReturn(run func(context.Context, metav1.ListOptions) (watch.Interface, error)) *mockEventInterface_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// newMockEventInterface creates a new instance of mockEventInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockEventInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockEventInterface {
	mock := &mockEventInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

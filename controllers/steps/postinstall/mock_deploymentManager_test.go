// Code generated by mockery v2.53.5. DO NOT EDIT.

package postinstall

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// mockDeploymentManager is an autogenerated mock type for the deploymentManager type
type mockDeploymentManager struct {
	mock.Mock
}

type mockDeploymentManager_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDeploymentManager) EXPECT() *mockDeploymentManager_Expecter {
	return &mockDeploymentManager_Expecter{mock: &_m.Mock}
}

// GetLastStartingTime provides a mock function with given fields: ctx, deploymentName
func (_m *mockDeploymentManager) GetLastStartingTime(ctx context.Context, deploymentName string) (*time.Time, error) {
	ret := _m.Called(ctx, deploymentName)

	if len(ret) == 0 {
		panic("no return value specified for GetLastStartingTime")
	}

	var r0 *time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*time.Time, error)); ok {
		return rf(ctx, deploymentName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *time.Time); ok {
		r0 = rf(ctx, deploymentName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, deploymentName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDeploymentManager_GetLastStartingTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastStartingTime'
type mockDeploymentManager_GetLastStartingTime_Call struct {
	*mock.Call
}

// GetLastStartingTime is a helper method to define mock.On call
//   - ctx context.Context
//   - deploymentName string
func (_e *mockDeploymentManager_Expecter) GetLastStartingTime(ctx interface{}, deploymentName interface{}) *mockDeploymentManager_GetLastStartingTime_Call {
	return &mockDeploymentManager_GetLastStartingTime_Call{Call: _e.mock.On("GetLastStartingTime", ctx, deploymentName)}
}

func (_c *mockDeploymentManager_GetLastStartingTime_Call) Run(run func(ctx context.Context, deploymentName string)) *mockDeploymentManager_GetLastStartingTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockDeploymentManager_GetLastStartingTime_Call) Return(_a0 *time.Time, _a1 error) *mockDeploymentManager_GetLastStartingTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDeploymentManager_GetLastStartingTime_Call) RunAndReturn(run func(context.Context, string) (*time.Time, error)) *mockDeploymentManager_GetLastStartingTime_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDeploymentManager creates a new instance of mockDeploymentManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDeploymentManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDeploymentManager {
	mock := &mockDeploymentManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

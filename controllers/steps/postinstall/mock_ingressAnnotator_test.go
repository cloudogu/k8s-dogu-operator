// Code generated by mockery v2.53.5. DO NOT EDIT.

package postinstall

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"

	v2 "github.com/cloudogu/k8s-dogu-lib/v2/api/v2"
)

// mockIngressAnnotator is an autogenerated mock type for the ingressAnnotator type
type mockIngressAnnotator struct {
	mock.Mock
}

type mockIngressAnnotator_Expecter struct {
	mock *mock.Mock
}

func (_m *mockIngressAnnotator) EXPECT() *mockIngressAnnotator_Expecter {
	return &mockIngressAnnotator_Expecter{mock: &_m.Mock}
}

// AppendIngressAnnotationsToService provides a mock function with given fields: service, additionalIngressAnnotations
func (_m *mockIngressAnnotator) AppendIngressAnnotationsToService(service *v1.Service, additionalIngressAnnotations v2.IngressAnnotations) error {
	ret := _m.Called(service, additionalIngressAnnotations)

	if len(ret) == 0 {
		panic("no return value specified for AppendIngressAnnotationsToService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Service, v2.IngressAnnotations) error); ok {
		r0 = rf(service, additionalIngressAnnotations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockIngressAnnotator_AppendIngressAnnotationsToService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendIngressAnnotationsToService'
type mockIngressAnnotator_AppendIngressAnnotationsToService_Call struct {
	*mock.Call
}

// AppendIngressAnnotationsToService is a helper method to define mock.On call
//   - service *v1.Service
//   - additionalIngressAnnotations v2.IngressAnnotations
func (_e *mockIngressAnnotator_Expecter) AppendIngressAnnotationsToService(service interface{}, additionalIngressAnnotations interface{}) *mockIngressAnnotator_AppendIngressAnnotationsToService_Call {
	return &mockIngressAnnotator_AppendIngressAnnotationsToService_Call{Call: _e.mock.On("AppendIngressAnnotationsToService", service, additionalIngressAnnotations)}
}

func (_c *mockIngressAnnotator_AppendIngressAnnotationsToService_Call) Run(run func(service *v1.Service, additionalIngressAnnotations v2.IngressAnnotations)) *mockIngressAnnotator_AppendIngressAnnotationsToService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Service), args[1].(v2.IngressAnnotations))
	})
	return _c
}

func (_c *mockIngressAnnotator_AppendIngressAnnotationsToService_Call) Return(_a0 error) *mockIngressAnnotator_AppendIngressAnnotationsToService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockIngressAnnotator_AppendIngressAnnotationsToService_Call) RunAndReturn(run func(*v1.Service, v2.IngressAnnotations) error) *mockIngressAnnotator_AppendIngressAnnotationsToService_Call {
	_c.Call.Return(run)
	return _c
}

// newMockIngressAnnotator creates a new instance of mockIngressAnnotator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockIngressAnnotator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockIngressAnnotator {
	mock := &mockIngressAnnotator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

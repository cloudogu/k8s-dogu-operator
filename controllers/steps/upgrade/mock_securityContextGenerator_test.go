// Code generated by mockery v2.53.5. DO NOT EDIT.

package upgrade

import (
	context "context"

	core "github.com/cloudogu/cesapp-lib/core"
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"

	v2 "github.com/cloudogu/k8s-dogu-lib/v2/api/v2"
)

// mockSecurityContextGenerator is an autogenerated mock type for the securityContextGenerator type
type mockSecurityContextGenerator struct {
	mock.Mock
}

type mockSecurityContextGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSecurityContextGenerator) EXPECT() *mockSecurityContextGenerator_Expecter {
	return &mockSecurityContextGenerator_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: ctx, dogu, doguResource
func (_m *mockSecurityContextGenerator) Generate(ctx context.Context, dogu *core.Dogu, doguResource *v2.Dogu) (*v1.PodSecurityContext, *v1.SecurityContext) {
	ret := _m.Called(ctx, dogu, doguResource)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 *v1.PodSecurityContext
	var r1 *v1.SecurityContext
	if rf, ok := ret.Get(0).(func(context.Context, *core.Dogu, *v2.Dogu) (*v1.PodSecurityContext, *v1.SecurityContext)); ok {
		return rf(ctx, dogu, doguResource)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *core.Dogu, *v2.Dogu) *v1.PodSecurityContext); ok {
		r0 = rf(ctx, dogu, doguResource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.PodSecurityContext)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *core.Dogu, *v2.Dogu) *v1.SecurityContext); ok {
		r1 = rf(ctx, dogu, doguResource)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*v1.SecurityContext)
		}
	}

	return r0, r1
}

// mockSecurityContextGenerator_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type mockSecurityContextGenerator_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - ctx context.Context
//   - dogu *core.Dogu
//   - doguResource *v2.Dogu
func (_e *mockSecurityContextGenerator_Expecter) Generate(ctx interface{}, dogu interface{}, doguResource interface{}) *mockSecurityContextGenerator_Generate_Call {
	return &mockSecurityContextGenerator_Generate_Call{Call: _e.mock.On("Generate", ctx, dogu, doguResource)}
}

func (_c *mockSecurityContextGenerator_Generate_Call) Run(run func(ctx context.Context, dogu *core.Dogu, doguResource *v2.Dogu)) *mockSecurityContextGenerator_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*core.Dogu), args[2].(*v2.Dogu))
	})
	return _c
}

func (_c *mockSecurityContextGenerator_Generate_Call) Return(_a0 *v1.PodSecurityContext, _a1 *v1.SecurityContext) *mockSecurityContextGenerator_Generate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSecurityContextGenerator_Generate_Call) RunAndReturn(run func(context.Context, *core.Dogu, *v2.Dogu) (*v1.PodSecurityContext, *v1.SecurityContext)) *mockSecurityContextGenerator_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSecurityContextGenerator creates a new instance of mockSecurityContextGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSecurityContextGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSecurityContextGenerator {
	mock := &mockSecurityContextGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

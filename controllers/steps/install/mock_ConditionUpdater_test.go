// Code generated by mockery v2.53.5. DO NOT EDIT.

package install

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v2 "github.com/cloudogu/k8s-dogu-lib/v2/api/v2"
)

// MockConditionUpdater is an autogenerated mock type for the ConditionUpdater type
type MockConditionUpdater struct {
	mock.Mock
}

type MockConditionUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConditionUpdater) EXPECT() *MockConditionUpdater_Expecter {
	return &MockConditionUpdater_Expecter{mock: &_m.Mock}
}

// UpdateCondition provides a mock function with given fields: ctx, doguResource, condition
func (_m *MockConditionUpdater) UpdateCondition(ctx context.Context, doguResource *v2.Dogu, condition v1.Condition) error {
	ret := _m.Called(ctx, doguResource, condition)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCondition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu, v1.Condition) error); ok {
		r0 = rf(ctx, doguResource, condition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConditionUpdater_UpdateCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCondition'
type MockConditionUpdater_UpdateCondition_Call struct {
	*mock.Call
}

// UpdateCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
//   - condition v1.Condition
func (_e *MockConditionUpdater_Expecter) UpdateCondition(ctx interface{}, doguResource interface{}, condition interface{}) *MockConditionUpdater_UpdateCondition_Call {
	return &MockConditionUpdater_UpdateCondition_Call{Call: _e.mock.On("UpdateCondition", ctx, doguResource, condition)}
}

func (_c *MockConditionUpdater_UpdateCondition_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu, condition v1.Condition)) *MockConditionUpdater_UpdateCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu), args[2].(v1.Condition))
	})
	return _c
}

func (_c *MockConditionUpdater_UpdateCondition_Call) Return(_a0 error) *MockConditionUpdater_UpdateCondition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConditionUpdater_UpdateCondition_Call) RunAndReturn(run func(context.Context, *v2.Dogu, v1.Condition) error) *MockConditionUpdater_UpdateCondition_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConditions provides a mock function with given fields: ctx, doguResource, conditions
func (_m *MockConditionUpdater) UpdateConditions(ctx context.Context, doguResource *v2.Dogu, conditions []v1.Condition) error {
	ret := _m.Called(ctx, doguResource, conditions)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConditions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu, []v1.Condition) error); ok {
		r0 = rf(ctx, doguResource, conditions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConditionUpdater_UpdateConditions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConditions'
type MockConditionUpdater_UpdateConditions_Call struct {
	*mock.Call
}

// UpdateConditions is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
//   - conditions []v1.Condition
func (_e *MockConditionUpdater_Expecter) UpdateConditions(ctx interface{}, doguResource interface{}, conditions interface{}) *MockConditionUpdater_UpdateConditions_Call {
	return &MockConditionUpdater_UpdateConditions_Call{Call: _e.mock.On("UpdateConditions", ctx, doguResource, conditions)}
}

func (_c *MockConditionUpdater_UpdateConditions_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu, conditions []v1.Condition)) *MockConditionUpdater_UpdateConditions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu), args[2].([]v1.Condition))
	})
	return _c
}

func (_c *MockConditionUpdater_UpdateConditions_Call) Return(_a0 error) *MockConditionUpdater_UpdateConditions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConditionUpdater_UpdateConditions_Call) RunAndReturn(run func(context.Context, *v2.Dogu, []v1.Condition) error) *MockConditionUpdater_UpdateConditions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConditionUpdater creates a new instance of MockConditionUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConditionUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConditionUpdater {
	mock := &MockConditionUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

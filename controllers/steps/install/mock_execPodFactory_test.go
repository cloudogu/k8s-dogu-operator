// Code generated by mockery v2.53.5. DO NOT EDIT.

package install

import (
	context "context"

	core "github.com/cloudogu/cesapp-lib/core"
	mock "github.com/stretchr/testify/mock"

	v2 "github.com/cloudogu/k8s-dogu-lib/v2/api/v2"
)

// mockExecPodFactory is an autogenerated mock type for the execPodFactory type
type mockExecPodFactory struct {
	mock.Mock
}

type mockExecPodFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *mockExecPodFactory) EXPECT() *mockExecPodFactory_Expecter {
	return &mockExecPodFactory_Expecter{mock: &_m.Mock}
}

// CheckReady provides a mock function with given fields: ctx, doguResource, dogu
func (_m *mockExecPodFactory) CheckReady(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu) error {
	ret := _m.Called(ctx, doguResource, dogu)

	if len(ret) == 0 {
		panic("no return value specified for CheckReady")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu, *core.Dogu) error); ok {
		r0 = rf(ctx, doguResource, dogu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockExecPodFactory_CheckReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckReady'
type mockExecPodFactory_CheckReady_Call struct {
	*mock.Call
}

// CheckReady is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
//   - dogu *core.Dogu
func (_e *mockExecPodFactory_Expecter) CheckReady(ctx interface{}, doguResource interface{}, dogu interface{}) *mockExecPodFactory_CheckReady_Call {
	return &mockExecPodFactory_CheckReady_Call{Call: _e.mock.On("CheckReady", ctx, doguResource, dogu)}
}

func (_c *mockExecPodFactory_CheckReady_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu)) *mockExecPodFactory_CheckReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu), args[2].(*core.Dogu))
	})
	return _c
}

func (_c *mockExecPodFactory_CheckReady_Call) Return(_a0 error) *mockExecPodFactory_CheckReady_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockExecPodFactory_CheckReady_Call) RunAndReturn(run func(context.Context, *v2.Dogu, *core.Dogu) error) *mockExecPodFactory_CheckReady_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdate provides a mock function with given fields: ctx, doguResource, dogu
func (_m *mockExecPodFactory) CreateOrUpdate(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu) error {
	ret := _m.Called(ctx, doguResource, dogu)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu, *core.Dogu) error); ok {
		r0 = rf(ctx, doguResource, dogu)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockExecPodFactory_CreateOrUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdate'
type mockExecPodFactory_CreateOrUpdate_Call struct {
	*mock.Call
}

// CreateOrUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
//   - dogu *core.Dogu
func (_e *mockExecPodFactory_Expecter) CreateOrUpdate(ctx interface{}, doguResource interface{}, dogu interface{}) *mockExecPodFactory_CreateOrUpdate_Call {
	return &mockExecPodFactory_CreateOrUpdate_Call{Call: _e.mock.On("CreateOrUpdate", ctx, doguResource, dogu)}
}

func (_c *mockExecPodFactory_CreateOrUpdate_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu)) *mockExecPodFactory_CreateOrUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu), args[2].(*core.Dogu))
	})
	return _c
}

func (_c *mockExecPodFactory_CreateOrUpdate_Call) Return(_a0 error) *mockExecPodFactory_CreateOrUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockExecPodFactory_CreateOrUpdate_Call) RunAndReturn(run func(context.Context, *v2.Dogu, *core.Dogu) error) *mockExecPodFactory_CreateOrUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, doguResource, dogu
func (_m *mockExecPodFactory) Exists(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu) bool {
	ret := _m.Called(ctx, doguResource, dogu)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *v2.Dogu, *core.Dogu) bool); ok {
		r0 = rf(ctx, doguResource, dogu)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockExecPodFactory_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type mockExecPodFactory_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - doguResource *v2.Dogu
//   - dogu *core.Dogu
func (_e *mockExecPodFactory_Expecter) Exists(ctx interface{}, doguResource interface{}, dogu interface{}) *mockExecPodFactory_Exists_Call {
	return &mockExecPodFactory_Exists_Call{Call: _e.mock.On("Exists", ctx, doguResource, dogu)}
}

func (_c *mockExecPodFactory_Exists_Call) Run(run func(ctx context.Context, doguResource *v2.Dogu, dogu *core.Dogu)) *mockExecPodFactory_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v2.Dogu), args[2].(*core.Dogu))
	})
	return _c
}

func (_c *mockExecPodFactory_Exists_Call) Return(_a0 bool) *mockExecPodFactory_Exists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockExecPodFactory_Exists_Call) RunAndReturn(run func(context.Context, *v2.Dogu, *core.Dogu) bool) *mockExecPodFactory_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// newMockExecPodFactory creates a new instance of mockExecPodFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockExecPodFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockExecPodFactory {
	mock := &mockExecPodFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

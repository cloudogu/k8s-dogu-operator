// Code generated by mockery v2.53.3. DO NOT EDIT.

package controllers

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// mockRequeuableErrorWithTime is an autogenerated mock type for the requeuableErrorWithTime type
type mockRequeuableErrorWithTime struct {
	mock.Mock
}

type mockRequeuableErrorWithTime_Expecter struct {
	mock *mock.Mock
}

func (_m *mockRequeuableErrorWithTime) EXPECT() *mockRequeuableErrorWithTime_Expecter {
	return &mockRequeuableErrorWithTime_Expecter{mock: &_m.Mock}
}

// GetRequeueTime provides a mock function with no fields
func (_m *mockRequeuableErrorWithTime) GetRequeueTime() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRequeueTime")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// mockRequeuableErrorWithTime_GetRequeueTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRequeueTime'
type mockRequeuableErrorWithTime_GetRequeueTime_Call struct {
	*mock.Call
}

// GetRequeueTime is a helper method to define mock.On call
func (_e *mockRequeuableErrorWithTime_Expecter) GetRequeueTime() *mockRequeuableErrorWithTime_GetRequeueTime_Call {
	return &mockRequeuableErrorWithTime_GetRequeueTime_Call{Call: _e.mock.On("GetRequeueTime")}
}

func (_c *mockRequeuableErrorWithTime_GetRequeueTime_Call) Run(run func()) *mockRequeuableErrorWithTime_GetRequeueTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockRequeuableErrorWithTime_GetRequeueTime_Call) Return(_a0 time.Duration) *mockRequeuableErrorWithTime_GetRequeueTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRequeuableErrorWithTime_GetRequeueTime_Call) RunAndReturn(run func() time.Duration) *mockRequeuableErrorWithTime_GetRequeueTime_Call {
	_c.Call.Return(run)
	return _c
}

// Requeue provides a mock function with no fields
func (_m *mockRequeuableErrorWithTime) Requeue() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Requeue")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockRequeuableErrorWithTime_Requeue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Requeue'
type mockRequeuableErrorWithTime_Requeue_Call struct {
	*mock.Call
}

// Requeue is a helper method to define mock.On call
func (_e *mockRequeuableErrorWithTime_Expecter) Requeue() *mockRequeuableErrorWithTime_Requeue_Call {
	return &mockRequeuableErrorWithTime_Requeue_Call{Call: _e.mock.On("Requeue")}
}

func (_c *mockRequeuableErrorWithTime_Requeue_Call) Run(run func()) *mockRequeuableErrorWithTime_Requeue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockRequeuableErrorWithTime_Requeue_Call) Return(_a0 bool) *mockRequeuableErrorWithTime_Requeue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRequeuableErrorWithTime_Requeue_Call) RunAndReturn(run func() bool) *mockRequeuableErrorWithTime_Requeue_Call {
	_c.Call.Return(run)
	return _c
}

// newMockRequeuableErrorWithTime creates a new instance of mockRequeuableErrorWithTime. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRequeuableErrorWithTime(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRequeuableErrorWithTime {
	mock := &mockRequeuableErrorWithTime{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

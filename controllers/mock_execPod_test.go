// Code generated by mockery v2.20.0. DO NOT EDIT.

package controllers

import (
	bytes "bytes"
	context "context"

	exec "github.com/cloudogu/k8s-dogu-operator/v3/controllers/exec"
	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"
)

// mockExecPod is an autogenerated mock type for the execPod type
type mockExecPod struct {
	mock.Mock
}

type mockExecPod_Expecter struct {
	mock *mock.Mock
}

func (_m *mockExecPod) EXPECT() *mockExecPod_Expecter {
	return &mockExecPod_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx
func (_m *mockExecPod) Create(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockExecPod_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockExecPod_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockExecPod_Expecter) Create(ctx interface{}) *mockExecPod_Create_Call {
	return &mockExecPod_Create_Call{Call: _e.mock.On("Create", ctx)}
}

func (_c *mockExecPod_Create_Call) Run(run func(ctx context.Context)) *mockExecPod_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockExecPod_Create_Call) Return(_a0 error) *mockExecPod_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockExecPod_Create_Call) RunAndReturn(run func(context.Context) error) *mockExecPod_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx
func (_m *mockExecPod) Delete(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockExecPod_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockExecPod_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockExecPod_Expecter) Delete(ctx interface{}) *mockExecPod_Delete_Call {
	return &mockExecPod_Delete_Call{Call: _e.mock.On("Delete", ctx)}
}

func (_c *mockExecPod_Delete_Call) Run(run func(ctx context.Context)) *mockExecPod_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockExecPod_Delete_Call) Return(_a0 error) *mockExecPod_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockExecPod_Delete_Call) RunAndReturn(run func(context.Context) error) *mockExecPod_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: ctx, cmd
func (_m *mockExecPod) Exec(ctx context.Context, cmd exec.ShellCommand) (*bytes.Buffer, error) {
	ret := _m.Called(ctx, cmd)

	var r0 *bytes.Buffer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, exec.ShellCommand) (*bytes.Buffer, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, exec.ShellCommand) *bytes.Buffer); ok {
		r0 = rf(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, exec.ShellCommand) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockExecPod_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type mockExecPod_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd exec.ShellCommand
func (_e *mockExecPod_Expecter) Exec(ctx interface{}, cmd interface{}) *mockExecPod_Exec_Call {
	return &mockExecPod_Exec_Call{Call: _e.mock.On("Exec", ctx, cmd)}
}

func (_c *mockExecPod_Exec_Call) Run(run func(ctx context.Context, cmd exec.ShellCommand)) *mockExecPod_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(exec.ShellCommand))
	})
	return _c
}

func (_c *mockExecPod_Exec_Call) Return(out *bytes.Buffer, err error) *mockExecPod_Exec_Call {
	_c.Call.Return(out, err)
	return _c
}

func (_c *mockExecPod_Exec_Call) RunAndReturn(run func(context.Context, exec.ShellCommand) (*bytes.Buffer, error)) *mockExecPod_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectKey provides a mock function with given fields:
func (_m *mockExecPod) ObjectKey() *types.NamespacedName {
	ret := _m.Called()

	var r0 *types.NamespacedName
	if rf, ok := ret.Get(0).(func() *types.NamespacedName); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NamespacedName)
		}
	}

	return r0
}

// mockExecPod_ObjectKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectKey'
type mockExecPod_ObjectKey_Call struct {
	*mock.Call
}

// ObjectKey is a helper method to define mock.On call
func (_e *mockExecPod_Expecter) ObjectKey() *mockExecPod_ObjectKey_Call {
	return &mockExecPod_ObjectKey_Call{Call: _e.mock.On("ObjectKey")}
}

func (_c *mockExecPod_ObjectKey_Call) Run(run func()) *mockExecPod_ObjectKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockExecPod_ObjectKey_Call) Return(_a0 *types.NamespacedName) *mockExecPod_ObjectKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockExecPod_ObjectKey_Call) RunAndReturn(run func() *types.NamespacedName) *mockExecPod_ObjectKey_Call {
	_c.Call.Return(run)
	return _c
}

// PodName provides a mock function with given fields:
func (_m *mockExecPod) PodName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockExecPod_PodName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PodName'
type mockExecPod_PodName_Call struct {
	*mock.Call
}

// PodName is a helper method to define mock.On call
func (_e *mockExecPod_Expecter) PodName() *mockExecPod_PodName_Call {
	return &mockExecPod_PodName_Call{Call: _e.mock.On("PodName")}
}

func (_c *mockExecPod_PodName_Call) Run(run func()) *mockExecPod_PodName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockExecPod_PodName_Call) Return(_a0 string) *mockExecPod_PodName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockExecPod_PodName_Call) RunAndReturn(run func() string) *mockExecPod_PodName_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockExecPod interface {
	mock.TestingT
	Cleanup(func())
}

// newMockExecPod creates a new instance of mockExecPod. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockExecPod(t mockConstructorTestingTnewMockExecPod) *mockExecPod {
	mock := &mockExecPod{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

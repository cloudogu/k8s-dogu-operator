// Code generated by mockery v2.53.5. DO NOT EDIT.

package main

import (
	context "context"

	event "sigs.k8s.io/controller-runtime/pkg/event"
	manager "sigs.k8s.io/controller-runtime/pkg/manager"

	mock "github.com/stretchr/testify/mock"

	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"

	v2 "github.com/cloudogu/k8s-dogu-lib/v2/api/v2"
)

// MockDoguReconciler is an autogenerated mock type for the DoguReconciler type
type MockDoguReconciler struct {
	mock.Mock
}

type MockDoguReconciler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDoguReconciler) EXPECT() *MockDoguReconciler_Expecter {
	return &MockDoguReconciler_Expecter{mock: &_m.Mock}
}

// Reconcile provides a mock function with given fields: _a0, _a1
func (_m *MockDoguReconciler) Reconcile(_a0 context.Context, _a1 reconcile.Request) (reconcile.Result, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Reconcile")
	}

	var r0 reconcile.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, reconcile.Request) (reconcile.Result, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, reconcile.Request) reconcile.Result); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(reconcile.Result)
	}

	if rf, ok := ret.Get(1).(func(context.Context, reconcile.Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDoguReconciler_Reconcile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reconcile'
type MockDoguReconciler_Reconcile_Call struct {
	*mock.Call
}

// Reconcile is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 reconcile.Request
func (_e *MockDoguReconciler_Expecter) Reconcile(_a0 interface{}, _a1 interface{}) *MockDoguReconciler_Reconcile_Call {
	return &MockDoguReconciler_Reconcile_Call{Call: _e.mock.On("Reconcile", _a0, _a1)}
}

func (_c *MockDoguReconciler_Reconcile_Call) Run(run func(_a0 context.Context, _a1 reconcile.Request)) *MockDoguReconciler_Reconcile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(reconcile.Request))
	})
	return _c
}

func (_c *MockDoguReconciler_Reconcile_Call) Return(_a0 reconcile.Result, _a1 error) *MockDoguReconciler_Reconcile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDoguReconciler_Reconcile_Call) RunAndReturn(run func(context.Context, reconcile.Request) (reconcile.Result, error)) *MockDoguReconciler_Reconcile_Call {
	_c.Call.Return(run)
	return _c
}

// SetupWithManager provides a mock function with given fields: mgr, externalEvents
func (_m *MockDoguReconciler) SetupWithManager(mgr manager.Manager, externalEvents <-chan event.TypedGenericEvent[*v2.Dogu]) error {
	ret := _m.Called(mgr, externalEvents)

	if len(ret) == 0 {
		panic("no return value specified for SetupWithManager")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(manager.Manager, <-chan event.TypedGenericEvent[*v2.Dogu]) error); ok {
		r0 = rf(mgr, externalEvents)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDoguReconciler_SetupWithManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupWithManager'
type MockDoguReconciler_SetupWithManager_Call struct {
	*mock.Call
}

// SetupWithManager is a helper method to define mock.On call
//   - mgr manager.Manager
//   - externalEvents <-chan event.TypedGenericEvent[*v2.Dogu]
func (_e *MockDoguReconciler_Expecter) SetupWithManager(mgr interface{}, externalEvents interface{}) *MockDoguReconciler_SetupWithManager_Call {
	return &MockDoguReconciler_SetupWithManager_Call{Call: _e.mock.On("SetupWithManager", mgr, externalEvents)}
}

func (_c *MockDoguReconciler_SetupWithManager_Call) Run(run func(mgr manager.Manager, externalEvents <-chan event.TypedGenericEvent[*v2.Dogu])) *MockDoguReconciler_SetupWithManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(manager.Manager), args[1].(<-chan event.TypedGenericEvent[*v2.Dogu]))
	})
	return _c
}

func (_c *MockDoguReconciler_SetupWithManager_Call) Return(_a0 error) *MockDoguReconciler_SetupWithManager_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDoguReconciler_SetupWithManager_Call) RunAndReturn(run func(manager.Manager, <-chan event.TypedGenericEvent[*v2.Dogu]) error) *MockDoguReconciler_SetupWithManager_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDoguReconciler creates a new instance of MockDoguReconciler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDoguReconciler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDoguReconciler {
	mock := &MockDoguReconciler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
